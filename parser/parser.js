module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(c) { return c },
        peg$c1 = function(com) { return com },
        peg$c2 = "class",
        peg$c3 = peg$literalExpectation("class", false),
        peg$c4 = "func",
        peg$c5 = peg$literalExpectation("func", false),
        peg$c6 = "number",
        peg$c7 = peg$literalExpectation("number", false),
        peg$c8 = "string",
        peg$c9 = peg$literalExpectation("string", false),
        peg$c10 = "boolean",
        peg$c11 = peg$literalExpectation("boolean", false),
        peg$c12 = /^[{]/,
        peg$c13 = peg$classExpectation(["{"], false, false),
        peg$c14 = /^[}]/,
        peg$c15 = peg$classExpectation(["}"], false, false),
        peg$c16 = /^[(]/,
        peg$c17 = peg$classExpectation(["("], false, false),
        peg$c18 = /^[)]/,
        peg$c19 = peg$classExpectation([")"], false, false),
        peg$c20 = /^[=]/,
        peg$c21 = peg$classExpectation(["="], false, false),
        peg$c22 = /^[;]/,
        peg$c23 = peg$classExpectation([";"], false, false),
        peg$c24 = "'",
        peg$c25 = peg$literalExpectation("'", false),
        peg$c26 = "\"",
        peg$c27 = peg$literalExpectation("\"", false),
        peg$c28 = ".",
        peg$c29 = peg$literalExpectation(".", false),
        peg$c30 = ",",
        peg$c31 = peg$literalExpectation(",", false),
        peg$c32 = "-",
        peg$c33 = peg$literalExpectation("-", false),
        peg$c34 = /^[a-zA-Z]/,
        peg$c35 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
        peg$c36 = function(w) { return w.join("") },
        peg$c37 = /^[^"']/,
        peg$c38 = peg$classExpectation(["\"", "'"], true, false),
        peg$c39 = function(s) { return s.join("") },
        peg$c40 = /^[0-9]/,
        peg$c41 = peg$classExpectation([["0", "9"]], false, false),
        peg$c42 = /^[" "]/,
        peg$c43 = peg$classExpectation(["\"", " ", "\""], false, false),
        peg$c44 = /^[" """\n\t\r]/,
        peg$c45 = peg$classExpectation(["\"", " ", "\"", "\"", "\"", "\n", "\t", "\r"], false, false),
        peg$c46 = peg$otherExpectation("whitespace"),
        peg$c47 = /^[ \t\n\r]/,
        peg$c48 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
        peg$c49 = function(arg, ai) { return ai; },
        peg$c50 = function(arg, more) {
            let args = [arg];
            args = args.concat(more[0] ? more[0].args : []);
            args = args.map(a => a);
            return {
                tokenType: "ArgumentsIn",
                args: args
            }
        },
        peg$c51 = function(type, arg, ad) { return ad; },
        peg$c52 = function(type, arg, more) {
            let args = [{
                type: type,
                identifier: arg
            }];
            args = args.concat(more[0] ? more[0].args : []);
            return {
                tokenType: "ArgumentsDefine",
                args: args
            }
        },
        peg$c53 = "constructor",
        peg$c54 = peg$literalExpectation("constructor", false),
        peg$c55 = function(ad, within) {
        	return {
            	tokenType: "Constructor",
                args: ad,
                within: within
        	}
        },
        peg$c56 = "if",
        peg$c57 = peg$literalExpectation("if", false),
        peg$c58 = "elif",
        peg$c59 = peg$literalExpectation("elif", false),
        peg$c60 = function(ex, wIf, elifEx, wElif) { return { tokenType: "ElifBlock", expression: elifEx, within: wElif }},
        peg$c61 = "else",
        peg$c62 = peg$literalExpectation("else", false),
        peg$c63 = function(ex, wIf, elseIfs, wElse) { return { tokenType: "ElseBlock", within: wElse }},
        peg$c64 = function(ex, wIf, elseIfs, elseBlock) {
            return {
                tokenType: "IfBlock",
                ifBlock: {
                    expression: ex,
                    within: wIf
                },
                elifBlocks: elseIfs,
                elseBlock: elseBlock
            }
        },
        peg$c65 = "//",
        peg$c66 = peg$literalExpectation("//", false),
        peg$c67 = /^[^("\n")]/,
        peg$c68 = peg$classExpectation(["(", "\"", "\n", "\"", ")"], true, false),
        peg$c69 = function(c) { return { tokenType: "Comment", comment: c.join("") } },
        peg$c70 = "while",
        peg$c71 = peg$literalExpectation("while", false),
        peg$c72 = function(ex, wWLoop) { return { tokenType: "WhileLoop", expression: ex, within: wWLoop } },
        peg$c73 = function(type, identifier, ex) { return ex },
        peg$c74 = function(type, identifier, res) {
            return {
                tokenType: "Definition",
        		type: type,
                identifier: identifier.trim(),
                equals: res
            }
        },
        peg$c75 = function(variable, ex) {
            return {
                tokenType: "Reassignment",
                variable: variable,
                equals: ex
            }
        },
        peg$c76 = "return",
        peg$c77 = peg$literalExpectation("return", false),
        peg$c78 = function() {return null},
        peg$c79 = function(ex) {return ex},
        peg$c80 = function(val) {
            return {
                tokenType: "Return",
                value: val
            }
        },
        peg$c81 = "break",
        peg$c82 = peg$literalExpectation("break", false),
        peg$c83 = function() {
            return {
                tokenType: "Break"
            }
        },
        peg$c84 = "new",
        peg$c85 = peg$literalExpectation("new", false),
        peg$c86 = function(className, args) {
            return {
                tokenType: "Instantiate",
                className: className,
                args: args
            }
        },
        peg$c87 = function(s, w) {
            return {
                tokenType: "Variable",
                scope: s,
                variableName: w
            }
        },
        peg$c88 = function(w, s2) { return s2 },
        peg$c89 = function(w, more) {
            let specs = [w];
            specs = specs.concat(more[0] ? more[0].scope : []);
            return {
                tokenType: "ScopeSpec",
                scope: specs.join(".")
            }
        },
        peg$c90 = function(v) { return { tokenType: "Primitive", type: "string", value: v } },
        peg$c91 = function(neg, n, dp, dec) { return dp + dec.join("") },
        peg$c92 = function(neg, n, extra) { return { tokenType: "Primitive", type: "number", value: parseFloat((neg ? neg : "") + n.join("") + (extra ? extra : "")) } },
        peg$c93 = "true",
        peg$c94 = peg$literalExpectation("true", false),
        peg$c95 = "false",
        peg$c96 = peg$literalExpectation("false", false),
        peg$c97 = function(b) { return { tokenType: "Primitive", type: "boolean", value: b == "true" ? true : false } },
        peg$c98 = "+",
        peg$c99 = peg$literalExpectation("+", false),
        peg$c100 = function(head, tail) {
              let x = tail.map(val => val);
              if(head.head && tail[0] && tail[0].length < 4){
                  return head.head
              }
              if(!tail[0] || !tail[0][3]){
                  return head
              }
              return {
              	  tokenType: "ArithmeticExpression",
                  left: head,
                  right: tail.map((val) => { return { tokenType: "ArithmeticOperation", op: val[1], value: val[3] } })
              }
          },
        peg$c101 = "*",
        peg$c102 = peg$literalExpectation("*", false),
        peg$c103 = "/",
        peg$c104 = peg$literalExpectation("/", false),
        peg$c105 = "%",
        peg$c106 = peg$literalExpectation("%", false),
        peg$c107 = function(head, tail) {
              let x = tail.map(val => val);
              if(head.head && tail[0] && tail[0].length < 4){
                  return head.head
              }
              if(!tail[0] || !tail[0][3]){
                  return head
              }
              return {
                  tokenType: "ArithmeticExpression",
                  left: head,
                  right: tail.map(val => { return { op: val[1], value: val[3] } })
              }
          },
        peg$c108 = "(",
        peg$c109 = peg$literalExpectation("(", false),
        peg$c110 = ")",
        peg$c111 = peg$literalExpectation(")", false),
        peg$c112 = function(expr) { return expr; },
        peg$c113 = function(f) { return f },
        peg$c114 = function(n) { return n },
        peg$c115 = function(v) { return v },
        peg$c116 = function(s, func, args) {
            return { 
                tokenType: "FuncCall",
                functionName: func,
                args: args,
                scope: s
            }
        },
        peg$c117 = "<=",
        peg$c118 = peg$literalExpectation("<=", false),
        peg$c119 = ">=",
        peg$c120 = peg$literalExpectation(">=", false),
        peg$c121 = "<",
        peg$c122 = peg$literalExpectation("<", false),
        peg$c123 = ">",
        peg$c124 = peg$literalExpectation(">", false),
        peg$c125 = "==",
        peg$c126 = peg$literalExpectation("==", false),
        peg$c127 = "!-",
        peg$c128 = peg$literalExpectation("!-", false),
        peg$c129 = function(e, op, e2) {
         	return {
            	tokenType: "BooleanExpression",
                op: op,
            	left: e,
                right: e2
            }
         },
        peg$c130 = function(s) { return s },
        peg$c131 = function(b) { return b },
        peg$c132 = function(i) { return i },
        peg$c133 = function(ae) { return ae },
        peg$c134 = function(ex) { return ex },
        peg$c135 = function(res) { return res },
        peg$c136 = function(cn, wc) {
        	return {
            	tokenType: "Class",
        		className: cn.trim(),
                within: wc
        	};
        },
        peg$c137 = function(f) {return f},
        peg$c138 = function(d) { return d },
        peg$c139 = function(fName, args, wF) {
            if(!wF.find(val => val.tokenType == "Return")){
                wF.push({ tokenType: "Return", value: null });
            }
        	return {
            	tokenType: "Function",
                funcName: fName.trim(),
                args: args,
                within: wF
            }
        },
        peg$c140 = function(r) { return r },
        peg$c141 = function(wL) { return wL },
        peg$c142 = function(ifS) { return ifS },
        peg$c143 = function(e) { return e },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parseProgramStart();

      return s0;
    }

    function peg$parseProgramStart() {
      var s0, s1, s2, s3, s4;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parseSpaceOrNot();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseClass();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSpaceOrNot();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c0(s3);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseSpaceOrNot();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseComment();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaceOrNot();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c1(s3);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parseSpaceOrNot();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseClass();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaceOrNot();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c0(s3);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parseSpaceOrNot();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseComment();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseSpaceOrNot();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s1;
                s2 = peg$c1(s3);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parseClassKeyword() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c2) {
        s0 = peg$c2;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }

      return s0;
    }

    function peg$parseFunctionKeyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c4) {
        s0 = peg$c4;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }

      return s0;
    }

    function peg$parseNumberKeyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c6) {
        s0 = peg$c6;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }

      return s0;
    }

    function peg$parseStringKeyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c8) {
        s0 = peg$c8;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }

      return s0;
    }

    function peg$parseBooleanKeyword() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c10) {
        s0 = peg$c10;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }

      return s0;
    }

    function peg$parseOpenCurly() {
      var s0;

      if (peg$c12.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }

      return s0;
    }

    function peg$parseCloseCurly() {
      var s0;

      if (peg$c14.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }

      return s0;
    }

    function peg$parseOpenParen() {
      var s0;

      if (peg$c16.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }

      return s0;
    }

    function peg$parseCloseParen() {
      var s0;

      if (peg$c18.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }

      return s0;
    }

    function peg$parseEquals() {
      var s0;

      if (peg$c20.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }

      return s0;
    }

    function peg$parseSemiColon() {
      var s0;

      if (peg$c22.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }

      return s0;
    }

    function peg$parseSingleQuote() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c24;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }

      return s0;
    }

    function peg$parseDoubleQuote() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c26;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }

      return s0;
    }

    function peg$parseDecimalPoint() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 46) {
        s0 = peg$c28;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }

      return s0;
    }

    function peg$parsePeriod() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 46) {
        s0 = peg$c28;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }

      return s0;
    }

    function peg$parseComma() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 44) {
        s0 = peg$c30;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }

      return s0;
    }

    function peg$parseNegativeSign() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c32;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }

      return s0;
    }

    function peg$parseWord() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c34.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c35); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c34.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c35); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c36(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseValidString() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c37.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c38); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c37.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c39(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDigits() {
      var s0, s1;

      s0 = [];
      if (peg$c40.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c40.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseWordOrDigit() {
      var s0;

      s0 = peg$parseWord();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDigits();
      }

      return s0;
    }

    function peg$parseSpace() {
      var s0, s1;

      s0 = [];
      if (peg$c42.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c42.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c43); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSpaceOrNot() {
      var s0, s1;

      s0 = [];
      if (peg$c44.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c44.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      if (peg$c47.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c47.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c48); }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }

      return s0;
    }

    function peg$parseArgumentsIn() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseSpaceOrNot();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpression();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSpaceOrNot();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseComma();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseArgumentsIn();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c49(s2, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseComma();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseArgumentsIn();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s6 = peg$c49(s2, s7);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c50(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseArgumentsDefine() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseSpaceOrNot();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWord();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSpace();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseWord();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSpaceOrNot();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$currPos;
                s8 = peg$parseComma();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseArgumentsDefine();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s7;
                    s8 = peg$c51(s2, s4, s9);
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$currPos;
                  s8 = peg$parseComma();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseArgumentsDefine();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s7;
                      s8 = peg$c51(s2, s4, s9);
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c52(s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseConstructor() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = peg$parseSpaceOrNot();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c53) {
          s2 = peg$c53;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c54); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOpenParen();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaceOrNot();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseArgumentsDefine();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaceOrNot();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseCloseParen();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaceOrNot();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseOpenCurly();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseSpaceOrNot();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseWithinFunction();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parseSpaceOrNot();
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parseCloseCurly();
                              if (s13 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c55(s5, s11);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDefinitionKeywords() {
      var s0;

      s0 = peg$parseNumberKeyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parseStringKeyword();
      }

      return s0;
    }

    function peg$parseIfBlock() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26;

      s0 = peg$currPos;
      s1 = peg$parseSpaceOrNot();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c56) {
          s2 = peg$c56;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c57); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSpaceOrNot();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOpenParen();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseBooleanExpression();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCloseParen();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseSpaceOrNot();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseOpenCurly();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseSpaceOrNot();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseWithinIf();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseSpaceOrNot();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parseCloseCurly();
                            if (s12 !== peg$FAILED) {
                              s13 = [];
                              s14 = peg$currPos;
                              s15 = peg$parseSpaceOrNot();
                              if (s15 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 4) === peg$c58) {
                                  s16 = peg$c58;
                                  peg$currPos += 4;
                                } else {
                                  s16 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c59); }
                                }
                                if (s16 !== peg$FAILED) {
                                  s17 = peg$parseSpaceOrNot();
                                  if (s17 !== peg$FAILED) {
                                    s18 = peg$parseOpenParen();
                                    if (s18 !== peg$FAILED) {
                                      s19 = peg$parseBooleanExpression();
                                      if (s19 !== peg$FAILED) {
                                        s20 = peg$parseCloseParen();
                                        if (s20 !== peg$FAILED) {
                                          s21 = peg$parseSpaceOrNot();
                                          if (s21 !== peg$FAILED) {
                                            s22 = peg$parseOpenCurly();
                                            if (s22 !== peg$FAILED) {
                                              s23 = peg$parseSpaceOrNot();
                                              if (s23 !== peg$FAILED) {
                                                s24 = peg$parseWithinIf();
                                                if (s24 !== peg$FAILED) {
                                                  s25 = peg$parseSpaceOrNot();
                                                  if (s25 !== peg$FAILED) {
                                                    s26 = peg$parseCloseCurly();
                                                    if (s26 !== peg$FAILED) {
                                                      peg$savedPos = s14;
                                                      s15 = peg$c60(s5, s10, s19, s24);
                                                      s14 = s15;
                                                    } else {
                                                      peg$currPos = s14;
                                                      s14 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s14;
                                                    s14 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s14;
                                                  s14 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s14;
                                                s14 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s14;
                                              s14 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s14;
                                            s14 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s14;
                                          s14 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s14;
                                        s14 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s14;
                                      s14 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s14;
                                    s14 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s14;
                                  s14 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s14;
                                s14 = peg$FAILED;
                              }
                              while (s14 !== peg$FAILED) {
                                s13.push(s14);
                                s14 = peg$currPos;
                                s15 = peg$parseSpaceOrNot();
                                if (s15 !== peg$FAILED) {
                                  if (input.substr(peg$currPos, 4) === peg$c58) {
                                    s16 = peg$c58;
                                    peg$currPos += 4;
                                  } else {
                                    s16 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c59); }
                                  }
                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$parseSpaceOrNot();
                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$parseOpenParen();
                                      if (s18 !== peg$FAILED) {
                                        s19 = peg$parseBooleanExpression();
                                        if (s19 !== peg$FAILED) {
                                          s20 = peg$parseCloseParen();
                                          if (s20 !== peg$FAILED) {
                                            s21 = peg$parseSpaceOrNot();
                                            if (s21 !== peg$FAILED) {
                                              s22 = peg$parseOpenCurly();
                                              if (s22 !== peg$FAILED) {
                                                s23 = peg$parseSpaceOrNot();
                                                if (s23 !== peg$FAILED) {
                                                  s24 = peg$parseWithinIf();
                                                  if (s24 !== peg$FAILED) {
                                                    s25 = peg$parseSpaceOrNot();
                                                    if (s25 !== peg$FAILED) {
                                                      s26 = peg$parseCloseCurly();
                                                      if (s26 !== peg$FAILED) {
                                                        peg$savedPos = s14;
                                                        s15 = peg$c60(s5, s10, s19, s24);
                                                        s14 = s15;
                                                      } else {
                                                        peg$currPos = s14;
                                                        s14 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s14;
                                                      s14 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s14;
                                                    s14 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s14;
                                                  s14 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s14;
                                                s14 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s14;
                                              s14 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s14;
                                            s14 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s14;
                                          s14 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s14;
                                        s14 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s14;
                                      s14 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s14;
                                    s14 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s14;
                                  s14 = peg$FAILED;
                                }
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$currPos;
                                s15 = peg$parseSpaceOrNot();
                                if (s15 !== peg$FAILED) {
                                  if (input.substr(peg$currPos, 4) === peg$c61) {
                                    s16 = peg$c61;
                                    peg$currPos += 4;
                                  } else {
                                    s16 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c62); }
                                  }
                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$parseSpaceOrNot();
                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$parseSpaceOrNot();
                                      if (s18 !== peg$FAILED) {
                                        s19 = peg$parseOpenCurly();
                                        if (s19 !== peg$FAILED) {
                                          s20 = peg$parseSpaceOrNot();
                                          if (s20 !== peg$FAILED) {
                                            s21 = peg$parseWithinIf();
                                            if (s21 !== peg$FAILED) {
                                              s22 = peg$parseSpaceOrNot();
                                              if (s22 !== peg$FAILED) {
                                                s23 = peg$parseCloseCurly();
                                                if (s23 !== peg$FAILED) {
                                                  peg$savedPos = s14;
                                                  s15 = peg$c63(s5, s10, s13, s21);
                                                  s14 = s15;
                                                } else {
                                                  peg$currPos = s14;
                                                  s14 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s14;
                                                s14 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s14;
                                              s14 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s14;
                                            s14 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s14;
                                          s14 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s14;
                                        s14 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s14;
                                      s14 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s14;
                                    s14 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s14;
                                  s14 = peg$FAILED;
                                }
                                if (s14 === peg$FAILED) {
                                  s14 = null;
                                }
                                if (s14 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c64(s5, s10, s13, s14);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSpaceOrNot();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c65) {
          s2 = peg$c65;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSpaceOrNot();
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (peg$c67.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c68); }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c67.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c68); }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSpaceOrNot();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c69(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseWhileLoop() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$parseSpaceOrNot();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c70) {
          s2 = peg$c70;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSpaceOrNot();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOpenParen();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseBooleanExpression();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCloseParen();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseSpaceOrNot();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseOpenCurly();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseSpaceOrNot();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseWithinLoop();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseSpaceOrNot();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parseCloseCurly();
                            if (s12 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c72(s5, s10);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDefinition() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseWord();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseWord();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpace();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseEquals();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseSpace();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseExpression();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s5;
                    s6 = peg$c73(s1, s3, s8);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSemiColon();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c74(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseReassignment() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseVariable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpace();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEquals();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpace();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSemiColon();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c75(s1, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseReturn() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseSpaceOrNot();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c76) {
          s2 = peg$c76;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c77); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseSemiColon();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c78();
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseSpace();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExpression();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaceOrNot();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseSemiColon();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c79(s5);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c80(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBreak() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSpaceOrNot();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c81) {
          s2 = peg$c81;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c82); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSpaceOrNot();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSemiColon();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSpaceOrNot();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c83();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseInstantiate() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseSpaceOrNot();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c84) {
          s2 = peg$c84;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c85); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSpace();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseWord();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseOpenParen();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseArgumentsIn();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseCloseParen();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c86(s4, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseVariable() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseScopeSpec();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWord();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c87(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseScopeSpec() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseSpaceOrNot();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWord();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsePeriod();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseScopeSpec();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c88(s2, s6);
            }
            s5 = s6;
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseScopeSpec();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c88(s2, s6);
              }
              s5 = s6;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c89(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseString() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseDoubleQuote();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaceOrNot();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseValidString();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpaceOrNot();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseDoubleQuote();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c90(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSingleQuote();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSpaceOrNot();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseValidString();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseSpaceOrNot();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseSingleQuote();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c90(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseNumber() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNegativeSign();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c40.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c40.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c41); }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseDecimalPoint();
            if (s5 !== peg$FAILED) {
              s6 = [];
              if (peg$c40.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c41); }
              }
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  if (peg$c40.test(input.charAt(peg$currPos))) {
                    s7 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c41); }
                  }
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c91(s2, s3, s5, s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c92(s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBoolean() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSpaceOrNot();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c93) {
          s2 = peg$c93;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c94); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c95) {
            s2 = peg$c95;
            peg$currPos += 5;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c96); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSpaceOrNot();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c97(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseArithmeticExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseTerm();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s5 = peg$c98;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c99); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s5 = peg$c32;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseTerm();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s5 = peg$c98;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c99); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s5 = peg$c32;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseTerm();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c100(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTerm() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseFactor();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s5 = peg$c101;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c102); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s5 = peg$c103;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c104); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 37) {
                s5 = peg$c105;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c106); }
              }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseFactor();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 42) {
              s5 = peg$c101;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c102); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s5 = peg$c103;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c104); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 37) {
                  s5 = peg$c105;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c106); }
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseFactor();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c107(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFactor() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c108;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c109); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseArithmeticExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c110;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c111); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c112(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFuncCall();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c113(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseNumber();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c114(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 === peg$FAILED) {
              s1 = null;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseVariable();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c115(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseFuncCall() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseScopeSpec();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWord();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOpenParen();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseArgumentsIn();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCloseParen();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c116(s1, s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBoolOperator() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c117) {
        s0 = peg$c117;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c118); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c119) {
          s0 = peg$c119;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 60) {
            s0 = peg$c121;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c122); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s0 = peg$c123;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c124); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c125) {
                s0 = peg$c125;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c126); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c127) {
                  s0 = peg$c127;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c128); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseBooleanExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseSpaceOrNot();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpression();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSpaceOrNot();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseBoolOperator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSpaceOrNot();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseExpression();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseSpaceOrNot();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c129(s2, s4, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExpression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSpaceOrNot();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseString();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c130(s3);
        }
        s2 = s3;
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseBoolean();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c131(s3);
          }
          s2 = s3;
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseNumber();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c114(s3);
            }
            s2 = s3;
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseInstantiate();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c132(s3);
              }
              s2 = s3;
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseArithmeticExpression();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c133(s3);
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parseVariable();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseSpaceOrNot();
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c115(s3);
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parseFuncCall();
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c113(s3);
                    }
                    s2 = s3;
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      s3 = peg$parseOpenParen();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseExpression();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseCloseParen();
                          if (s5 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c134(s4);
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSpaceOrNot();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c135(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClass() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseClassKeyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseWord();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpace();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseOpenCurly();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSpaceOrNot();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseWithinClass();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseSpaceOrNot();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseCloseCurly();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c136(s3, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseWithinClass() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parseComment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c0(s2);
      }
      s1 = s2;
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseFunction();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSpaceOrNot();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c137(s2);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parseDefinition();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSpaceOrNot();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c138(s2);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$parseConstructor();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseSpaceOrNot();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s1;
                s2 = peg$c0(s2);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          }
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parseComment();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c0(s2);
        }
        s1 = s2;
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parseFunction();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSpaceOrNot();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c137(s2);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$parseDefinition();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseSpaceOrNot();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s1;
                s2 = peg$c138(s2);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$parseConstructor();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseSpaceOrNot();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s1;
                  s2 = peg$c0(s2);
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$parseFunctionKeyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseWord();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOpenParen();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseArgumentsDefine();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCloseParen();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseSpaceOrNot();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseOpenCurly();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseSpaceOrNot();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseWithinFunction();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseSpaceOrNot();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parseCloseCurly();
                            if (s12 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c139(s3, s5, s10);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseWithinFunction() {
      var s0, s1, s2, s3, s4, s5;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parseComment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c0(s2);
      }
      s1 = s2;
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseReturn();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c140(s2);
        }
        s1 = s2;
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parseDefinition();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSpaceOrNot();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c138(s2);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$parseWhileLoop();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseSpaceOrNot();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s1;
                s2 = peg$c141(s2);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$parseIfBlock();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseSpaceOrNot();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s1;
                  s2 = peg$c142(s2);
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
              if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                s2 = peg$parseReassignment();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseSpaceOrNot();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s1;
                    s2 = peg$c140(s2);
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
                if (s1 === peg$FAILED) {
                  s1 = peg$currPos;
                  s2 = peg$parseExpression();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseSpaceOrNot();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseSemiColon();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseSpaceOrNot();
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s1;
                          s2 = peg$c143(s2);
                          s1 = s2;
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parseComment();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c0(s2);
        }
        s1 = s2;
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parseReturn();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c140(s2);
          }
          s1 = s2;
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$parseDefinition();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseSpaceOrNot();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s1;
                s2 = peg$c138(s2);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$parseWhileLoop();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseSpaceOrNot();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s1;
                  s2 = peg$c141(s2);
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
              if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                s2 = peg$parseIfBlock();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseSpaceOrNot();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s1;
                    s2 = peg$c142(s2);
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
                if (s1 === peg$FAILED) {
                  s1 = peg$currPos;
                  s2 = peg$parseReassignment();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseSpaceOrNot();
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s1;
                      s2 = peg$c140(s2);
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                  if (s1 === peg$FAILED) {
                    s1 = peg$currPos;
                    s2 = peg$parseExpression();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseSpaceOrNot();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseSemiColon();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseSpaceOrNot();
                          if (s5 !== peg$FAILED) {
                            peg$savedPos = s1;
                            s2 = peg$c143(s2);
                            s1 = s2;
                          } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseWithinIf() {
      var s0, s1, s2, s3, s4, s5;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parseComment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c0(s2);
      }
      s1 = s2;
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseBreak();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c131(s2);
        }
        s1 = s2;
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parseReturn();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c140(s2);
          }
          s1 = s2;
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$parseDefinition();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseSpaceOrNot();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s1;
                s2 = peg$c138(s2);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$parseWhileLoop();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseSpaceOrNot();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s1;
                  s2 = peg$c141(s2);
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
              if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                s2 = peg$parseIfBlock();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseSpaceOrNot();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s1;
                    s2 = peg$c142(s2);
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
                if (s1 === peg$FAILED) {
                  s1 = peg$currPos;
                  s2 = peg$parseReassignment();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseSpaceOrNot();
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s1;
                      s2 = peg$c140(s2);
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                  if (s1 === peg$FAILED) {
                    s1 = peg$currPos;
                    s2 = peg$parseExpression();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseSpaceOrNot();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseSemiColon();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseSpaceOrNot();
                          if (s5 !== peg$FAILED) {
                            peg$savedPos = s1;
                            s2 = peg$c143(s2);
                            s1 = s2;
                          } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parseComment();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c0(s2);
        }
        s1 = s2;
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parseBreak();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c131(s2);
          }
          s1 = s2;
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$parseReturn();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c140(s2);
            }
            s1 = s2;
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$parseDefinition();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseSpaceOrNot();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s1;
                  s2 = peg$c138(s2);
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
              if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                s2 = peg$parseWhileLoop();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseSpaceOrNot();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s1;
                    s2 = peg$c141(s2);
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
                if (s1 === peg$FAILED) {
                  s1 = peg$currPos;
                  s2 = peg$parseIfBlock();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseSpaceOrNot();
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s1;
                      s2 = peg$c142(s2);
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                  if (s1 === peg$FAILED) {
                    s1 = peg$currPos;
                    s2 = peg$parseReassignment();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseSpaceOrNot();
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s1;
                        s2 = peg$c140(s2);
                        s1 = s2;
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                    if (s1 === peg$FAILED) {
                      s1 = peg$currPos;
                      s2 = peg$parseExpression();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseSpaceOrNot();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseSemiColon();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseSpaceOrNot();
                            if (s5 !== peg$FAILED) {
                              peg$savedPos = s1;
                              s2 = peg$c143(s2);
                              s1 = s2;
                            } else {
                              peg$currPos = s1;
                              s1 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseWithinLoop() {
      var s0, s1, s2, s3, s4, s5;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parseComment();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c0(s2);
      }
      s1 = s2;
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseReturn();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c140(s2);
        }
        s1 = s2;
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parseDefinition();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSpaceOrNot();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c138(s2);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$parseWhileLoop();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseSpaceOrNot();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s1;
                s2 = peg$c141(s2);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$parseBreak();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s1;
                s2 = peg$c131(s2);
              }
              s1 = s2;
              if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                s2 = peg$parseIfBlock();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseSpaceOrNot();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s1;
                    s2 = peg$c142(s2);
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
                if (s1 === peg$FAILED) {
                  s1 = peg$currPos;
                  s2 = peg$parseReassignment();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseSpaceOrNot();
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s1;
                      s2 = peg$c140(s2);
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                  if (s1 === peg$FAILED) {
                    s1 = peg$currPos;
                    s2 = peg$parseExpression();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseSpaceOrNot();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseSemiColon();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseSpaceOrNot();
                          if (s5 !== peg$FAILED) {
                            peg$savedPos = s1;
                            s2 = peg$c143(s2);
                            s1 = s2;
                          } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parseComment();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c0(s2);
        }
        s1 = s2;
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parseReturn();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c140(s2);
          }
          s1 = s2;
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$parseDefinition();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseSpaceOrNot();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s1;
                s2 = peg$c138(s2);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$parseWhileLoop();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseSpaceOrNot();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s1;
                  s2 = peg$c141(s2);
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
              if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                s2 = peg$parseBreak();
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s1;
                  s2 = peg$c131(s2);
                }
                s1 = s2;
                if (s1 === peg$FAILED) {
                  s1 = peg$currPos;
                  s2 = peg$parseIfBlock();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseSpaceOrNot();
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s1;
                      s2 = peg$c142(s2);
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                  if (s1 === peg$FAILED) {
                    s1 = peg$currPos;
                    s2 = peg$parseReassignment();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseSpaceOrNot();
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s1;
                        s2 = peg$c140(s2);
                        s1 = s2;
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                    if (s1 === peg$FAILED) {
                      s1 = peg$currPos;
                      s2 = peg$parseExpression();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseSpaceOrNot();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseSemiColon();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseSpaceOrNot();
                            if (s5 !== peg$FAILED) {
                              peg$savedPos = s1;
                              s2 = peg$c143(s2);
                              s1 = s2;
                            } else {
                              peg$currPos = s1;
                              s1 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
