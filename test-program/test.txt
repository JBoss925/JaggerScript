{
  token: 'P',
  classes: [
    <ref *1> {
      token: 'C',
      name: 'BinarySearch',
      scope: Map(0) {},
      globalVars: [ [length]: 0 ],
      functions: [
        {
          token: 'F',
          parent: [Circular *1],
          name: 'main',
          scopes: Map(0) {},
          args: undefined,
          within: [
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'FC',
                    functionName: 'cubeRoot',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'number',
                          value: 9000,
                          typeStr: 'number',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: undefined
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            { token: 'RT', value: undefined },
            [length]: 2
          ]
        },
        {
          token: 'F',
          parent: [Circular *1],
          name: 'f',
          scopes: Map(0) {},
          args: {
            token: 'A',
            args: [
              { token: 'AD', type: 'number', identifier: 'x' },
              [length]: 1
            ]
          },
          within: [
            {
              token: 'RT',
              value: {
                token: 'AE',
                left: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'x',
                  type: 'unknown',
                  typeStr: 'unknown'
                },
                right: [
                  {
                    token: 'AO',
                    operation: '*',
                    value: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'x',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  {
                    token: 'AO',
                    operation: '*',
                    value: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'x',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 2
                ]
              }
            },
            [length]: 1
          ]
        },
        {
          token: 'F',
          parent: [Circular *1],
          name: 'cubeRoot',
          scopes: Map(0) {},
          args: {
            token: 'A',
            args: [
              { token: 'AD', type: 'number', identifier: 'of' },
              [length]: 1
            ]
          },
          within: [
            {
              token: 'D',
              type: 'number',
              identifier: 'minRoot',
              equals: {
                token: 'V',
                type: 'number',
                value: 0,
                typeStr: 'number',
                numLiveReferences: 0
              }
            },
            {
              token: 'D',
              type: 'number',
              identifier: 'maxRoot',
              equals: {
                token: 'VA',
                scope: undefined,
                variableName: 'of',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            {
              token: 'W',
              expression: {
                token: 'BE',
                operator: '>=',
                left: {
                  token: 'AE',
                  left: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'maxRoot',
                    type: 'unknown',
                    typeStr: 'unknown'
                  },
                  right: [
                    {
                      token: 'AO',
                      operation: '-',
                      value: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'minRoot',
                        type: 'unknown',
                        typeStr: 'unknown'
                      }
                    },
                    [length]: 1
                  ]
                },
                right: {
                  token: 'V',
                  type: 'number',
                  value: 0.0001,
                  typeStr: 'number',
                  numLiveReferences: 0
                }
              },
              within: [
                {
                  token: 'D',
                  type: 'number',
                  identifier: 'midRoot',
                  equals: {
                    token: 'AE',
                    left: {
                      token: 'AE',
                      left: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'maxRoot',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      right: [
                        {
                          token: 'AO',
                          operation: '+',
                          value: {
                            token: 'VA',
                            scope: undefined,
                            variableName: 'minRoot',
                            type: 'unknown',
                            typeStr: 'unknown'
                          }
                        },
                        [length]: 1
                      ]
                    },
                    right: [
                      {
                        token: 'AO',
                        operation: '/',
                        value: {
                          token: 'V',
                          type: 'number',
                          value: 2,
                          typeStr: 'number',
                          numLiveReferences: 0
                        }
                      },
                      [length]: 1
                    ]
                  }
                },
                { token: 'B' },
                {
                  token: 'If',
                  ifBlock: {
                    expression: {
                      token: 'BE',
                      operator: '<=',
                      left: {
                        token: 'FC',
                        functionName: 'f',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'VA',
                              scope: undefined,
                              variableName: 'midRoot',
                              type: 'unknown',
                              typeStr: 'unknown'
                            },
                            [length]: 1
                          ]
                        },
                        scope: undefined
                      },
                      right: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'of',
                        type: 'unknown',
                        typeStr: 'unknown'
                      }
                    },
                    within: [
                      {
                        token: 'R',
                        variable: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'minRoot',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        equals: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'midRoot',
                          type: 'unknown',
                          typeStr: 'unknown'
                        }
                      },
                      [length]: 1
                    ]
                  },
                  elifBlocks: [ [length]: 0 ],
                  elseBlock: {
                    token: 'E',
                    within: [
                      {
                        token: 'R',
                        variable: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'maxRoot',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        equals: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'midRoot',
                          type: 'unknown',
                          typeStr: 'unknown'
                        }
                      },
                      [length]: 1
                    ]
                  }
                },
                [length]: 3
              ]
            },
            {
              token: 'RT',
              value: {
                token: 'VA',
                scope: undefined,
                variableName: 'midRoot',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            [length]: 4
          ]
        },
        [length]: 3
      ],
      construct: {
        token: 'CO',
        parent: [Circular *1],
        args: undefined,
        within: [
          { token: 'COM', comment: 'Here is a comment!' },
          {
            token: 'COM',
            comment: 'In this example, we compute the cube root'
          },
          {
            token: 'COM',
            comment: 'of 20 to within 0.001 using binary search.'
          },
          [length]: 3
        ]
      }
    },
    [length]: 1
  ]
}