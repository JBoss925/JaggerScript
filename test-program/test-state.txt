{
  heap: HeapWrapper {
    heap: Map(35) {
      '1' => {
        value: {
          token: 'IN',
          type: 'Main',
          class: <ref *1> {
            token: 'C',
            name: 'Main',
            scope: Map(0) {},
            globalVars: [ [length]: 0 ],
            functions: [
              {
                token: 'F',
                parent: [Circular *1],
                name: 'main',
                scopes: Map(0) {},
                args: undefined,
                within: [
                  {
                    token: 'D',
                    type: 'DoublyLinkedList',
                    identifier: 'list',
                    equals: {
                      token: 'I',
                      className: 'DoublyLinkedList',
                      args: undefined
                    }
                  },
                  {
                    token: 'FC',
                    functionName: 'add',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'number',
                          value: 7,
                          typeStr: 'number',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'add',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'number',
                          value: 12,
                          typeStr: 'number',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'add',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'number',
                          value: 8,
                          typeStr: 'number',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'add',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'number',
                          value: 42,
                          typeStr: 'number',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'log',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'string',
                          value: 'All elements:',
                          typeStr: 'string',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
                  },
                  {
                    token: 'D',
                    type: 'number',
                    identifier: 'i',
                    equals: {
                      token: 'V',
                      type: 'number',
                      value: 0,
                      typeStr: 'number',
                      numLiveReferences: 0
                    }
                  },
                  {
                    token: 'W',
                    expression: {
                      token: 'BE',
                      operator: '<',
                      left: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'i',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      right: {
                        token: 'VA',
                        scope: { token: 'S', scope: [ 'list', [length]: 1 ] },
                        variableName: 'length',
                        type: 'unknown',
                        typeStr: 'unknown'
                      }
                    },
                    within: [
                      {
                        token: 'FC',
                        functionName: 'log',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'FC',
                              functionName: 'get',
                              args: {
                                token: 'AI',
                                args: [
                                  {
                                    token: 'VA',
                                    scope: undefined,
                                    variableName: 'i',
                                    type: 'unknown',
                                    typeStr: 'unknown'
                                  },
                                  [length]: 1
                                ]
                              },
                              scope: {
                                token: 'S',
                                scope: [ 'list', [length]: 1 ]
                              }
                            },
                            [length]: 1
                          ]
                        },
                        scope: {
                          token: 'S',
                          scope: [ 'console', [length]: 1 ]
                        }
                      },
                      {
                        token: 'R',
                        variable: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'i',
                          type: 'number',
                          typeStr: 'number'
                        },
                        equals: {
                          token: 'AE',
                          left: {
                            token: 'VA',
                            scope: undefined,
                            variableName: 'i',
                            type: 'unknown',
                            typeStr: 'unknown'
                          },
                          right: [
                            {
                              token: 'AO',
                              operation: '+',
                              value: {
                                token: 'V',
                                type: 'number',
                                value: 1,
                                typeStr: 'number',
                                numLiveReferences: 0
                              }
                            },
                            [length]: 1
                          ]
                        }
                      },
                      [length]: 2
                    ]
                  },
                  {
                    token: 'FC',
                    functionName: 'log',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'string',
                          value: '',
                          typeStr: 'string',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'log',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'string',
                          value: 'Got second element:',
                          typeStr: 'string',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'log',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'FC',
                          functionName: 'get',
                          args: {
                            token: 'AI',
                            args: [
                              {
                                token: 'V',
                                type: 'number',
                                value: 1,
                                typeStr: 'number',
                                numLiveReferences: 0
                              },
                              [length]: 1
                            ]
                          },
                          scope: {
                            token: 'S',
                            scope: [ 'list', [length]: 1 ]
                          }
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'log',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'string',
                          value: '',
                          typeStr: 'string',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'log',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'string',
                          value: 'Removed third element:',
                          typeStr: 'string',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'log',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'FC',
                          functionName: 'remove',
                          args: {
                            token: 'AI',
                            args: [
                              {
                                token: 'V',
                                type: 'number',
                                value: 2,
                                typeStr: 'number',
                                numLiveReferences: 0
                              },
                              [length]: 1
                            ]
                          },
                          scope: {
                            token: 'S',
                            scope: [ 'list', [length]: 1 ]
                          }
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'log',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'string',
                          value: '',
                          typeStr: 'string',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'log',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'string',
                          value: 'Removed first element:',
                          typeStr: 'string',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'log',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'FC',
                          functionName: 'remove',
                          args: {
                            token: 'AI',
                            args: [
                              {
                                token: 'V',
                                type: 'number',
                                value: 0,
                                typeStr: 'number',
                                numLiveReferences: 0
                              },
                              [length]: 1
                            ]
                          },
                          scope: {
                            token: 'S',
                            scope: [ 'list', [length]: 1 ]
                          }
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'log',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'string',
                          value: '',
                          typeStr: 'string',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'log',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'string',
                          value: 'Final list length:',
                          typeStr: 'string',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'log',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: {
                            token: 'S',
                            scope: [ 'list', [length]: 1 ]
                          },
                          variableName: 'length',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
                  },
                  { token: 'RT', value: undefined },
                  [length]: 21
                ]
              },
              [length]: 1
            ],
            construct: {
              token: 'CO',
              parent: [Circular *1],
              args: undefined,
              within: [ [length]: 0 ]
            }
          },
          pointer: '1',
          globalScope: Map(0) {}
        },
        typeStr: 'Main',
        numLiveReferences: 1,
        token: 'V',
        type: 'instance',
        heapPtr: '1'
      },
      '2' => {
        value: {
          token: 'IN',
          type: 'DoublyLinkedList',
          class: <ref *2> {
            token: 'C',
            name: 'DoublyLinkedList',
            scope: Map(0) {},
            globalVars: [
              {
                token: 'D',
                type: 'Node',
                identifier: 'head',
                equals: undefined
              },
              {
                token: 'D',
                type: 'Node',
                identifier: 'tail',
                equals: undefined
              },
              {
                token: 'D',
                type: 'number',
                identifier: 'length',
                equals: {
                  token: 'V',
                  type: 'number',
                  value: 0,
                  typeStr: 'number',
                  numLiveReferences: 0
                }
              },
              [length]: 3
            ],
            functions: [
              {
                token: 'F',
                parent: [Circular *2],
                name: 'add',
                scopes: Map(0) {},
                args: {
                  token: 'A',
                  args: [
                    {
                      token: 'AD',
                      type: 'number',
                      identifier: 'value'
                    },
                    [length]: 1
                  ]
                },
                within: [
                  {
                    token: 'D',
                    type: 'Node',
                    identifier: 'newNode',
                    equals: {
                      token: 'I',
                      className: 'Node',
                      args: {
                        token: 'AI',
                        args: [
                          {
                            token: 'VA',
                            scope: undefined,
                            variableName: 'value',
                            type: 'unknown',
                            typeStr: 'unknown'
                          },
                          [length]: 1
                        ]
                      }
                    }
                  },
                  {
                    token: 'If',
                    ifBlock: {
                      expression: {
                        token: 'BE',
                        operator: '==',
                        left: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'head',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        right: {
                          token: 'V',
                          type: 'undefined',
                          value: undefined,
                          typeStr: 'undefined',
                          numLiveReferences: 0
                        }
                      },
                      within: [
                        {
                          token: 'R',
                          variable: {
                            token: 'VA',
                            scope: undefined,
                            variableName: 'head',
                            type: 'instance',
                            typeStr: 'Node'
                          },
                          equals: {
                            token: 'VA',
                            scope: undefined,
                            variableName: 'newNode',
                            type: 'unknown',
                            typeStr: 'unknown'
                          }
                        },
                        {
                          token: 'R',
                          variable: {
                            token: 'VA',
                            scope: undefined,
                            variableName: 'tail',
                            type: 'instance',
                            typeStr: 'Node'
                          },
                          equals: {
                            token: 'VA',
                            scope: undefined,
                            variableName: 'head',
                            type: 'unknown',
                            typeStr: 'unknown'
                          }
                        },
                        [length]: 2
                      ]
                    },
                    elifBlocks: [ [length]: 0 ],
                    elseBlock: {
                      token: 'E',
                      within: [
                        {
                          token: 'FC',
                          functionName: 'linkNext',
                          args: {
                            token: 'AI',
                            args: [
                              {
                                token: 'VA',
                                scope: undefined,
                                variableName: 'newNode',
                                type: 'unknown',
                                typeStr: 'unknown'
                              },
                              [length]: 1
                            ]
                          },
                          scope: {
                            token: 'S',
                            scope: [ 'tail', [length]: 1 ]
                          }
                        },
                        {
                          token: 'FC',
                          functionName: 'linkPrev',
                          args: {
                            token: 'AI',
                            args: [
                              {
                                token: 'VA',
                                scope: undefined,
                                variableName: 'tail',
                                type: 'unknown',
                                typeStr: 'unknown'
                              },
                              [length]: 1
                            ]
                          },
                          scope: {
                            token: 'S',
                            scope: [ 'newNode', [length]: 1 ]
                          }
                        },
                        {
                          token: 'R',
                          variable: {
                            token: 'VA',
                            scope: undefined,
                            variableName: 'tail',
                            type: 'instance',
                            typeStr: 'Node'
                          },
                          equals: {
                            token: 'VA',
                            scope: undefined,
                            variableName: 'newNode',
                            type: 'unknown',
                            typeStr: 'unknown'
                          }
                        },
                        [length]: 3
                      ]
                    }
                  },
                  {
                    token: 'R',
                    variable: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'length',
                      type: 'number',
                      typeStr: 'number'
                    },
                    equals: {
                      token: 'AE',
                      left: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'length',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      right: [
                        {
                          token: 'AO',
                          operation: '+',
                          value: {
                            token: 'V',
                            type: 'number',
                            value: 1,
                            typeStr: 'number',
                            numLiveReferences: 0
                          }
                        },
                        [length]: 1
                      ]
                    }
                  },
                  { token: 'RT', value: undefined },
                  [length]: 4
                ]
              },
              {
                token: 'F',
                parent: [Circular *2],
                name: 'getNode',
                scopes: Map(0) {},
                args: {
                  token: 'A',
                  args: [
                    {
                      token: 'AD',
                      type: 'number',
                      identifier: 'index'
                    },
                    [length]: 1
                  ]
                },
                within: [
                  {
                    token: 'D',
                    type: 'Node',
                    identifier: 'nextNode',
                    equals: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'head',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  {
                    token: 'D',
                    type: 'number',
                    identifier: 'i',
                    equals: {
                      token: 'V',
                      type: 'number',
                      value: 0,
                      typeStr: 'number',
                      numLiveReferences: 0
                    }
                  },
                  {
                    token: 'W',
                    expression: {
                      token: 'BE',
                      operator: '<',
                      left: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'i',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      right: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'index',
                        type: 'unknown',
                        typeStr: 'unknown'
                      }
                    },
                    within: [
                      {
                        token: 'R',
                        variable: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'nextNode',
                          type: 'instance',
                          typeStr: 'Node'
                        },
                        equals: {
                          token: 'FC',
                          functionName: 'getNext',
                          args: undefined,
                          scope: {
                            token: 'S',
                            scope: [ 'nextNode', [length]: 1 ]
                          }
                        }
                      },
                      {
                        token: 'R',
                        variable: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'i',
                          type: 'number',
                          typeStr: 'number'
                        },
                        equals: {
                          token: 'AE',
                          left: {
                            token: 'VA',
                            scope: undefined,
                            variableName: 'i',
                            type: 'unknown',
                            typeStr: 'unknown'
                          },
                          right: [
                            {
                              token: 'AO',
                              operation: '+',
                              value: {
                                token: 'V',
                                type: 'number',
                                value: 1,
                                typeStr: 'number',
                                numLiveReferences: 0
                              }
                            },
                            [length]: 1
                          ]
                        }
                      },
                      [length]: 2
                    ]
                  },
                  {
                    token: 'RT',
                    value: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'nextNode',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 4
                ]
              },
              {
                token: 'F',
                parent: [Circular *2],
                name: 'get',
                scopes: Map(0) {},
                args: {
                  token: 'A',
                  args: [
                    {
                      token: 'AD',
                      type: 'number',
                      identifier: 'index'
                    },
                    [length]: 1
                  ]
                },
                within: [
                  {
                    token: 'D',
                    type: 'Node',
                    identifier: 'inQ',
                    equals: {
                      token: 'FC',
                      functionName: 'getNode',
                      args: {
                        token: 'AI',
                        args: [
                          {
                            token: 'VA',
                            scope: undefined,
                            variableName: 'index',
                            type: 'unknown',
                            typeStr: 'unknown'
                          },
                          [length]: 1
                        ]
                      },
                      scope: undefined
                    }
                  },
                  {
                    token: 'RT',
                    value: {
                      token: 'FC',
                      functionName: 'getValue',
                      args: undefined,
                      scope: { token: 'S', scope: [ 'inQ', [length]: 1 ] }
                    }
                  },
                  [length]: 2
                ]
              },
              {
                token: 'F',
                parent: [Circular *2],
                name: 'remove',
                scopes: Map(0) {},
                args: {
                  token: 'A',
                  args: [
                    {
                      token: 'AD',
                      type: 'number',
                      identifier: 'index'
                    },
                    [length]: 1
                  ]
                },
                within: [
                  {
                    token: 'D',
                    type: 'Node',
                    identifier: 'removed',
                    equals: {
                      token: 'FC',
                      functionName: 'getNode',
                      args: {
                        token: 'AI',
                        args: [
                          {
                            token: 'VA',
                            scope: undefined,
                            variableName: 'index',
                            type: 'unknown',
                            typeStr: 'unknown'
                          },
                          [length]: 1
                        ]
                      },
                      scope: undefined
                    }
                  },
                  {
                    token: 'FC',
                    functionName: 'linkNext',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'undefined',
                          value: undefined,
                          typeStr: 'undefined',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'linkPrev',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'undefined',
                          value: undefined,
                          typeStr: 'undefined',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                  },
                  {
                    token: 'D',
                    type: 'Node',
                    identifier: 'next',
                    equals: {
                      token: 'FC',
                      functionName: 'getNext',
                      args: undefined,
                      scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                    }
                  },
                  {
                    token: 'D',
                    type: 'Node',
                    identifier: 'prev',
                    equals: {
                      token: 'FC',
                      functionName: 'getPrev',
                      args: undefined,
                      scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                    }
                  },
                  {
                    token: 'If',
                    ifBlock: {
                      expression: {
                        token: 'BE',
                        operator: '!=',
                        left: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'next',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        right: {
                          token: 'V',
                          type: 'undefined',
                          value: undefined,
                          typeStr: 'undefined',
                          numLiveReferences: 0
                        }
                      },
                      within: [
                        {
                          token: 'FC',
                          functionName: 'linkPrev',
                          args: {
                            token: 'AI',
                            args: [
                              {
                                token: 'VA',
                                scope: undefined,
                                variableName: 'prev',
                                type: 'unknown',
                                typeStr: 'unknown'
                              },
                              [length]: 1
                            ]
                          },
                          scope: {
                            token: 'S',
                            scope: [ 'next', [length]: 1 ]
                          }
                        },
                        [length]: 1
                      ]
                    },
                    elifBlocks: [ [length]: 0 ],
                    elseBlock: undefined
                  },
                  {
                    token: 'If',
                    ifBlock: {
                      expression: {
                        token: 'BE',
                        operator: '!=',
                        left: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'prev',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        right: {
                          token: 'V',
                          type: 'undefined',
                          value: undefined,
                          typeStr: 'undefined',
                          numLiveReferences: 0
                        }
                      },
                      within: [
                        {
                          token: 'FC',
                          functionName: 'linkNext',
                          args: {
                            token: 'AI',
                            args: [
                              {
                                token: 'VA',
                                scope: undefined,
                                variableName: 'next',
                                type: 'unknown',
                                typeStr: 'unknown'
                              },
                              [length]: 1
                            ]
                          },
                          scope: {
                            token: 'S',
                            scope: [ 'prev', [length]: 1 ]
                          }
                        },
                        [length]: 1
                      ]
                    },
                    elifBlocks: [ [length]: 0 ],
                    elseBlock: undefined
                  },
                  {
                    token: 'R',
                    variable: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'length',
                      type: 'number',
                      typeStr: 'number'
                    },
                    equals: {
                      token: 'AE',
                      left: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'length',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      right: [
                        {
                          token: 'AO',
                          operation: '-',
                          value: {
                            token: 'V',
                            type: 'number',
                            value: 1,
                            typeStr: 'number',
                            numLiveReferences: 0
                          }
                        },
                        [length]: 1
                      ]
                    }
                  },
                  {
                    token: 'RT',
                    value: {
                      token: 'FC',
                      functionName: 'getValue',
                      args: undefined,
                      scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                    }
                  },
                  [length]: 9
                ]
              },
              [length]: 4
            ],
            construct: {
              token: 'CO',
              parent: [Circular *2],
              args: undefined,
              within: [ [length]: 0 ]
            }
          },
          pointer: '2',
          globalScope: Map(3) { 'head' => '6', 'tail' => '24', 'length' => '35' }
        },
        typeStr: 'DoublyLinkedList',
        numLiveReferences: 1,
        token: 'V',
        type: 'instance',
        heapPtr: '2'
      },
      '3' => {
        value: undefined,
        typeStr: 'Node',
        numLiveReferences: 0,
        type: 'undefined',
        token: 'V',
        heapPtr: '3'
      },
      '4' => {
        value: undefined,
        typeStr: 'Node',
        numLiveReferences: 0,
        type: 'undefined',
        token: 'V',
        heapPtr: '4'
      },
      '5' => {
        value: 0,
        typeStr: 'number',
        numLiveReferences: 0,
        type: 'number',
        token: 'V',
        heapPtr: '5'
      },
      '6' => {
        value: {
          token: 'IN',
          type: 'Node',
          class: <ref *3> {
            token: 'C',
            name: 'Node',
            scope: Map(0) {},
            globalVars: [
              {
                token: 'D',
                type: 'Node',
                identifier: 'next',
                equals: undefined
              },
              {
                token: 'D',
                type: 'Node',
                identifier: 'prev',
                equals: undefined
              },
              {
                token: 'D',
                type: 'number',
                identifier: 'value',
                equals: undefined
              },
              [length]: 3
            ],
            functions: [
              {
                token: 'F',
                parent: [Circular *3],
                name: 'linkNext',
                scopes: Map(0) {},
                args: {
                  token: 'A',
                  args: [
                    { token: 'AD', type: 'Node', identifier: 'n' },
                    [length]: 1
                  ]
                },
                within: [
                  {
                    token: 'R',
                    variable: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'next',
                      type: 'undefined',
                      typeStr: 'Node'
                    },
                    equals: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'n',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  { token: 'RT', value: undefined },
                  [length]: 2
                ]
              },
              {
                token: 'F',
                parent: [Circular *3],
                name: 'linkPrev',
                scopes: Map(0) {},
                args: {
                  token: 'A',
                  args: [
                    { token: 'AD', type: 'Node', identifier: 'n' },
                    [length]: 1
                  ]
                },
                within: [
                  {
                    token: 'R',
                    variable: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'prev',
                      type: 'undefined',
                      typeStr: 'Node'
                    },
                    equals: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'n',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  { token: 'RT', value: undefined },
                  [length]: 2
                ]
              },
              {
                token: 'F',
                parent: [Circular *3],
                name: 'getNext',
                scopes: Map(0) {},
                args: undefined,
                within: [
                  {
                    token: 'RT',
                    value: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'next',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 1
                ]
              },
              {
                token: 'F',
                parent: [Circular *3],
                name: 'getPrev',
                scopes: Map(0) {},
                args: undefined,
                within: [
                  {
                    token: 'RT',
                    value: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'prev',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 1
                ]
              },
              {
                token: 'F',
                parent: [Circular *3],
                name: 'getValue',
                scopes: Map(0) {},
                args: undefined,
                within: [
                  {
                    token: 'RT',
                    value: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'value',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 1
                ]
              },
              [length]: 5
            ],
            construct: {
              token: 'CO',
              parent: [Circular *3],
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'number', identifier: 'x' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'value',
                    type: 'number',
                    typeStr: 'number'
                  },
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'x',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 1
              ]
            }
          },
          pointer: '6',
          globalScope: Map(3) { 'next' => '33', 'prev' => '34', 'value' => '10' }
        },
        typeStr: 'Node',
        numLiveReferences: 3,
        token: 'V',
        type: 'instance',
        heapPtr: '6'
      },
      '7' => {
        value: undefined,
        typeStr: 'Node',
        numLiveReferences: 0,
        type: 'undefined',
        token: 'V',
        heapPtr: '7'
      },
      '8' => {
        value: undefined,
        typeStr: 'Node',
        numLiveReferences: 0,
        type: 'undefined',
        token: 'V',
        heapPtr: '8'
      },
      '9' => {
        value: undefined,
        typeStr: 'number',
        numLiveReferences: 0,
        type: 'undefined',
        token: 'V',
        heapPtr: '9'
      },
      '10' => {
        typeStr: 'number',
        numLiveReferences: 1,
        value: 7,
        type: 'number',
        token: 'V',
        heapPtr: '10'
      },
      '11' => {
        typeStr: 'number',
        numLiveReferences: 0,
        value: 1,
        type: 'number',
        token: 'V',
        heapPtr: '11'
      },
      '12' => {
        value: {
          token: 'IN',
          type: 'Node',
          class: <ref *3> {
            token: 'C',
            name: 'Node',
            scope: Map(0) {},
            globalVars: [
              {
                token: 'D',
                type: 'Node',
                identifier: 'next',
                equals: undefined
              },
              {
                token: 'D',
                type: 'Node',
                identifier: 'prev',
                equals: undefined
              },
              {
                token: 'D',
                type: 'number',
                identifier: 'value',
                equals: undefined
              },
              [length]: 3
            ],
            functions: [
              {
                token: 'F',
                parent: [Circular *3],
                name: 'linkNext',
                scopes: Map(0) {},
                args: {
                  token: 'A',
                  args: [
                    { token: 'AD', type: 'Node', identifier: 'n' },
                    [length]: 1
                  ]
                },
                within: [
                  {
                    token: 'R',
                    variable: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'next',
                      type: 'undefined',
                      typeStr: 'Node'
                    },
                    equals: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'n',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  { token: 'RT', value: undefined },
                  [length]: 2
                ]
              },
              {
                token: 'F',
                parent: [Circular *3],
                name: 'linkPrev',
                scopes: Map(0) {},
                args: {
                  token: 'A',
                  args: [
                    { token: 'AD', type: 'Node', identifier: 'n' },
                    [length]: 1
                  ]
                },
                within: [
                  {
                    token: 'R',
                    variable: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'prev',
                      type: 'undefined',
                      typeStr: 'Node'
                    },
                    equals: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'n',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  { token: 'RT', value: undefined },
                  [length]: 2
                ]
              },
              {
                token: 'F',
                parent: [Circular *3],
                name: 'getNext',
                scopes: Map(0) {},
                args: undefined,
                within: [
                  {
                    token: 'RT',
                    value: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'next',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 1
                ]
              },
              {
                token: 'F',
                parent: [Circular *3],
                name: 'getPrev',
                scopes: Map(0) {},
                args: undefined,
                within: [
                  {
                    token: 'RT',
                    value: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'prev',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 1
                ]
              },
              {
                token: 'F',
                parent: [Circular *3],
                name: 'getValue',
                scopes: Map(0) {},
                args: undefined,
                within: [
                  {
                    token: 'RT',
                    value: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'value',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 1
                ]
              },
              [length]: 5
            ],
            construct: {
              token: 'CO',
              parent: [Circular *3],
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'number', identifier: 'x' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'value',
                    type: 'number',
                    typeStr: 'number'
                  },
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'x',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 1
              ]
            }
          },
          pointer: '12',
          globalScope: Map(3) { 'next' => '18', 'prev' => '6', 'value' => '16' }
        },
        typeStr: 'Node',
        numLiveReferences: 1,
        token: 'V',
        type: 'instance',
        heapPtr: '12'
      },
      '13' => {
        value: undefined,
        typeStr: 'Node',
        numLiveReferences: 0,
        type: 'undefined',
        token: 'V',
        heapPtr: '13'
      },
      '14' => {
        value: undefined,
        typeStr: 'Node',
        numLiveReferences: 0,
        type: 'undefined',
        token: 'V',
        heapPtr: '14'
      },
      '15' => {
        value: undefined,
        typeStr: 'number',
        numLiveReferences: 0,
        type: 'undefined',
        token: 'V',
        heapPtr: '15'
      },
      '16' => {
        typeStr: 'number',
        numLiveReferences: 1,
        value: 12,
        type: 'number',
        token: 'V',
        heapPtr: '16'
      },
      '17' => {
        typeStr: 'number',
        numLiveReferences: 0,
        value: 2,
        type: 'number',
        token: 'V',
        heapPtr: '17'
      },
      '18' => {
        value: {
          token: 'IN',
          type: 'Node',
          class: <ref *3> {
            token: 'C',
            name: 'Node',
            scope: Map(0) {},
            globalVars: [
              {
                token: 'D',
                type: 'Node',
                identifier: 'next',
                equals: undefined
              },
              {
                token: 'D',
                type: 'Node',
                identifier: 'prev',
                equals: undefined
              },
              {
                token: 'D',
                type: 'number',
                identifier: 'value',
                equals: undefined
              },
              [length]: 3
            ],
            functions: [
              {
                token: 'F',
                parent: [Circular *3],
                name: 'linkNext',
                scopes: Map(0) {},
                args: {
                  token: 'A',
                  args: [
                    { token: 'AD', type: 'Node', identifier: 'n' },
                    [length]: 1
                  ]
                },
                within: [
                  {
                    token: 'R',
                    variable: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'next',
                      type: 'undefined',
                      typeStr: 'Node'
                    },
                    equals: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'n',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  { token: 'RT', value: undefined },
                  [length]: 2
                ]
              },
              {
                token: 'F',
                parent: [Circular *3],
                name: 'linkPrev',
                scopes: Map(0) {},
                args: {
                  token: 'A',
                  args: [
                    { token: 'AD', type: 'Node', identifier: 'n' },
                    [length]: 1
                  ]
                },
                within: [
                  {
                    token: 'R',
                    variable: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'prev',
                      type: 'undefined',
                      typeStr: 'Node'
                    },
                    equals: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'n',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  { token: 'RT', value: undefined },
                  [length]: 2
                ]
              },
              {
                token: 'F',
                parent: [Circular *3],
                name: 'getNext',
                scopes: Map(0) {},
                args: undefined,
                within: [
                  {
                    token: 'RT',
                    value: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'next',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 1
                ]
              },
              {
                token: 'F',
                parent: [Circular *3],
                name: 'getPrev',
                scopes: Map(0) {},
                args: undefined,
                within: [
                  {
                    token: 'RT',
                    value: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'prev',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 1
                ]
              },
              {
                token: 'F',
                parent: [Circular *3],
                name: 'getValue',
                scopes: Map(0) {},
                args: undefined,
                within: [
                  {
                    token: 'RT',
                    value: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'value',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 1
                ]
              },
              [length]: 5
            ],
            construct: {
              token: 'CO',
              parent: [Circular *3],
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'number', identifier: 'x' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'value',
                    type: 'number',
                    typeStr: 'number'
                  },
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'x',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 1
              ]
            }
          },
          pointer: '18',
          globalScope: Map(3) { 'next' => '30', 'prev' => '31', 'value' => '22' }
        },
        typeStr: 'Node',
        numLiveReferences: 3,
        token: 'V',
        type: 'instance',
        heapPtr: '18'
      },
      '19' => {
        value: undefined,
        typeStr: 'Node',
        numLiveReferences: 0,
        type: 'undefined',
        token: 'V',
        heapPtr: '19'
      },
      '20' => {
        value: undefined,
        typeStr: 'Node',
        numLiveReferences: 0,
        type: 'undefined',
        token: 'V',
        heapPtr: '20'
      },
      '21' => {
        value: undefined,
        typeStr: 'number',
        numLiveReferences: 0,
        type: 'undefined',
        token: 'V',
        heapPtr: '21'
      },
      '22' => {
        typeStr: 'number',
        numLiveReferences: 1,
        value: 8,
        type: 'number',
        token: 'V',
        heapPtr: '22'
      },
      '23' => {
        typeStr: 'number',
        numLiveReferences: 0,
        value: 3,
        type: 'number',
        token: 'V',
        heapPtr: '23'
      },
      '24' => {
        value: {
          token: 'IN',
          type: 'Node',
          class: <ref *3> {
            token: 'C',
            name: 'Node',
            scope: Map(0) {},
            globalVars: [
              {
                token: 'D',
                type: 'Node',
                identifier: 'next',
                equals: undefined
              },
              {
                token: 'D',
                type: 'Node',
                identifier: 'prev',
                equals: undefined
              },
              {
                token: 'D',
                type: 'number',
                identifier: 'value',
                equals: undefined
              },
              [length]: 3
            ],
            functions: [
              {
                token: 'F',
                parent: [Circular *3],
                name: 'linkNext',
                scopes: Map(0) {},
                args: {
                  token: 'A',
                  args: [
                    { token: 'AD', type: 'Node', identifier: 'n' },
                    [length]: 1
                  ]
                },
                within: [
                  {
                    token: 'R',
                    variable: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'next',
                      type: 'undefined',
                      typeStr: 'Node'
                    },
                    equals: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'n',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  { token: 'RT', value: undefined },
                  [length]: 2
                ]
              },
              {
                token: 'F',
                parent: [Circular *3],
                name: 'linkPrev',
                scopes: Map(0) {},
                args: {
                  token: 'A',
                  args: [
                    { token: 'AD', type: 'Node', identifier: 'n' },
                    [length]: 1
                  ]
                },
                within: [
                  {
                    token: 'R',
                    variable: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'prev',
                      type: 'undefined',
                      typeStr: 'Node'
                    },
                    equals: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'n',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  { token: 'RT', value: undefined },
                  [length]: 2
                ]
              },
              {
                token: 'F',
                parent: [Circular *3],
                name: 'getNext',
                scopes: Map(0) {},
                args: undefined,
                within: [
                  {
                    token: 'RT',
                    value: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'next',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 1
                ]
              },
              {
                token: 'F',
                parent: [Circular *3],
                name: 'getPrev',
                scopes: Map(0) {},
                args: undefined,
                within: [
                  {
                    token: 'RT',
                    value: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'prev',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 1
                ]
              },
              {
                token: 'F',
                parent: [Circular *3],
                name: 'getValue',
                scopes: Map(0) {},
                args: undefined,
                within: [
                  {
                    token: 'RT',
                    value: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'value',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 1
                ]
              },
              [length]: 5
            ],
            construct: {
              token: 'CO',
              parent: [Circular *3],
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'number', identifier: 'x' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'value',
                    type: 'number',
                    typeStr: 'number'
                  },
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'x',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 1
              ]
            }
          },
          pointer: '24',
          globalScope: Map(3) { 'next' => '25', 'prev' => '18', 'value' => '28' }
        },
        typeStr: 'Node',
        numLiveReferences: 2,
        token: 'V',
        type: 'instance',
        heapPtr: '24'
      },
      '25' => {
        value: undefined,
        typeStr: 'Node',
        numLiveReferences: 1,
        type: 'undefined',
        token: 'V',
        heapPtr: '25'
      },
      '26' => {
        value: undefined,
        typeStr: 'Node',
        numLiveReferences: 0,
        type: 'undefined',
        token: 'V',
        heapPtr: '26'
      },
      '27' => {
        value: undefined,
        typeStr: 'number',
        numLiveReferences: 0,
        type: 'undefined',
        token: 'V',
        heapPtr: '27'
      },
      '28' => {
        typeStr: 'number',
        numLiveReferences: 1,
        value: 42,
        type: 'number',
        token: 'V',
        heapPtr: '28'
      },
      '29' => {
        typeStr: 'number',
        numLiveReferences: 0,
        value: 4,
        type: 'number',
        token: 'V',
        heapPtr: '29'
      },
      '30' => {
        typeStr: 'undefined',
        numLiveReferences: 1,
        value: undefined,
        type: 'undefined',
        token: 'V',
        heapPtr: '30'
      },
      '31' => {
        typeStr: 'undefined',
        numLiveReferences: 1,
        value: undefined,
        type: 'undefined',
        token: 'V',
        heapPtr: '31'
      },
      '32' => {
        typeStr: 'number',
        numLiveReferences: 0,
        value: 3,
        type: 'number',
        token: 'V',
        heapPtr: '32'
      },
      '33' => {
        typeStr: 'undefined',
        numLiveReferences: 1,
        value: undefined,
        type: 'undefined',
        token: 'V',
        heapPtr: '33'
      },
      '34' => {
        typeStr: 'undefined',
        numLiveReferences: 1,
        value: undefined,
        type: 'undefined',
        token: 'V',
        heapPtr: '34'
      },
      '35' => {
        typeStr: 'number',
        numLiveReferences: 1,
        value: 2,
        type: 'number',
        token: 'V',
        heapPtr: '35'
      }
    }
  },
  stack: [
    Map(0) {},
    Map(0) {},
    Map(0) {},
    Map(0) {},
    Map(0) {},
    [length]: 5
  ],
  runningInstance: {
    token: 'IN',
    type: 'Main',
    class: <ref *1> {
      token: 'C',
      name: 'Main',
      scope: Map(0) {},
      globalVars: [ [length]: 0 ],
      functions: [
        {
          token: 'F',
          parent: [Circular *1],
          name: 'main',
          scopes: Map(0) {},
          args: undefined,
          within: [
            {
              token: 'D',
              type: 'DoublyLinkedList',
              identifier: 'list',
              equals: {
                token: 'I',
                className: 'DoublyLinkedList',
                args: undefined
              }
            },
            {
              token: 'FC',
              functionName: 'add',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'number',
                    value: 7,
                    typeStr: 'number',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'add',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'number',
                    value: 12,
                    typeStr: 'number',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'add',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'number',
                    value: 8,
                    typeStr: 'number',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'add',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'number',
                    value: 42,
                    typeStr: 'number',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: 'All elements:',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'D',
              type: 'number',
              identifier: 'i',
              equals: {
                token: 'V',
                type: 'number',
                value: 0,
                typeStr: 'number',
                numLiveReferences: 0
              }
            },
            {
              token: 'W',
              expression: {
                token: 'BE',
                operator: '<',
                left: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'i',
                  type: 'unknown',
                  typeStr: 'unknown'
                },
                right: {
                  token: 'VA',
                  scope: { token: 'S', scope: [ 'list', [length]: 1 ] },
                  variableName: 'length',
                  type: 'unknown',
                  typeStr: 'unknown'
                }
              },
              within: [
                {
                  token: 'FC',
                  functionName: 'log',
                  args: {
                    token: 'AI',
                    args: [
                      {
                        token: 'FC',
                        functionName: 'get',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'VA',
                              scope: undefined,
                              variableName: 'i',
                              type: 'unknown',
                              typeStr: 'unknown'
                            },
                            [length]: 1
                          ]
                        },
                        scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                      },
                      [length]: 1
                    ]
                  },
                  scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
                },
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'i',
                    type: 'number',
                    typeStr: 'number'
                  },
                  equals: {
                    token: 'AE',
                    left: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'i',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    right: [
                      {
                        token: 'AO',
                        operation: '+',
                        value: {
                          token: 'V',
                          type: 'number',
                          value: 1,
                          typeStr: 'number',
                          numLiveReferences: 0
                        }
                      },
                      [length]: 1
                    ]
                  }
                },
                [length]: 2
              ]
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: '',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: 'Got second element:',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'FC',
                    functionName: 'get',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'number',
                          value: 1,
                          typeStr: 'number',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: '',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: 'Removed third element:',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'FC',
                    functionName: 'remove',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'number',
                          value: 2,
                          typeStr: 'number',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: '',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: 'Removed first element:',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'FC',
                    functionName: 'remove',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'number',
                          value: 0,
                          typeStr: 'number',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: '',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: 'Final list length:',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'VA',
                    scope: { token: 'S', scope: [ 'list', [length]: 1 ] },
                    variableName: 'length',
                    type: 'unknown',
                    typeStr: 'unknown'
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            { token: 'RT', value: undefined },
            [length]: 21
          ]
        },
        [length]: 1
      ],
      construct: {
        token: 'CO',
        parent: [Circular *1],
        args: undefined,
        within: [ [length]: 0 ]
      }
    },
    pointer: '1',
    globalScope: Map(0) {}
  },
  classes: Map(3) {
    'Main' => <ref *1> {
      token: 'C',
      name: 'Main',
      scope: Map(0) {},
      globalVars: [ [length]: 0 ],
      functions: [
        {
          token: 'F',
          parent: [Circular *1],
          name: 'main',
          scopes: Map(0) {},
          args: undefined,
          within: [
            {
              token: 'D',
              type: 'DoublyLinkedList',
              identifier: 'list',
              equals: {
                token: 'I',
                className: 'DoublyLinkedList',
                args: undefined
              }
            },
            {
              token: 'FC',
              functionName: 'add',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'number',
                    value: 7,
                    typeStr: 'number',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'add',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'number',
                    value: 12,
                    typeStr: 'number',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'add',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'number',
                    value: 8,
                    typeStr: 'number',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'add',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'number',
                    value: 42,
                    typeStr: 'number',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: 'All elements:',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'D',
              type: 'number',
              identifier: 'i',
              equals: {
                token: 'V',
                type: 'number',
                value: 0,
                typeStr: 'number',
                numLiveReferences: 0
              }
            },
            {
              token: 'W',
              expression: {
                token: 'BE',
                operator: '<',
                left: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'i',
                  type: 'unknown',
                  typeStr: 'unknown'
                },
                right: {
                  token: 'VA',
                  scope: { token: 'S', scope: [ 'list', [length]: 1 ] },
                  variableName: 'length',
                  type: 'unknown',
                  typeStr: 'unknown'
                }
              },
              within: [
                {
                  token: 'FC',
                  functionName: 'log',
                  args: {
                    token: 'AI',
                    args: [
                      {
                        token: 'FC',
                        functionName: 'get',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'VA',
                              scope: undefined,
                              variableName: 'i',
                              type: 'unknown',
                              typeStr: 'unknown'
                            },
                            [length]: 1
                          ]
                        },
                        scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                      },
                      [length]: 1
                    ]
                  },
                  scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
                },
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'i',
                    type: 'number',
                    typeStr: 'number'
                  },
                  equals: {
                    token: 'AE',
                    left: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'i',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    right: [
                      {
                        token: 'AO',
                        operation: '+',
                        value: {
                          token: 'V',
                          type: 'number',
                          value: 1,
                          typeStr: 'number',
                          numLiveReferences: 0
                        }
                      },
                      [length]: 1
                    ]
                  }
                },
                [length]: 2
              ]
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: '',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: 'Got second element:',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'FC',
                    functionName: 'get',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'number',
                          value: 1,
                          typeStr: 'number',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: '',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: 'Removed third element:',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'FC',
                    functionName: 'remove',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'number',
                          value: 2,
                          typeStr: 'number',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: '',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: 'Removed first element:',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'FC',
                    functionName: 'remove',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'number',
                          value: 0,
                          typeStr: 'number',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: '',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: 'Final list length:',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'VA',
                    scope: { token: 'S', scope: [ 'list', [length]: 1 ] },
                    variableName: 'length',
                    type: 'unknown',
                    typeStr: 'unknown'
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            { token: 'RT', value: undefined },
            [length]: 21
          ]
        },
        [length]: 1
      ],
      construct: {
        token: 'CO',
        parent: [Circular *1],
        args: undefined,
        within: [ [length]: 0 ]
      }
    },
    'DoublyLinkedList' => <ref *2> {
      token: 'C',
      name: 'DoublyLinkedList',
      scope: Map(0) {},
      globalVars: [
        {
          token: 'D',
          type: 'Node',
          identifier: 'head',
          equals: undefined
        },
        {
          token: 'D',
          type: 'Node',
          identifier: 'tail',
          equals: undefined
        },
        {
          token: 'D',
          type: 'number',
          identifier: 'length',
          equals: {
            token: 'V',
            type: 'number',
            value: 0,
            typeStr: 'number',
            numLiveReferences: 0
          }
        },
        [length]: 3
      ],
      functions: [
        {
          token: 'F',
          parent: [Circular *2],
          name: 'add',
          scopes: Map(0) {},
          args: {
            token: 'A',
            args: [
              { token: 'AD', type: 'number', identifier: 'value' },
              [length]: 1
            ]
          },
          within: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'newNode',
              equals: {
                token: 'I',
                className: 'Node',
                args: {
                  token: 'AI',
                  args: [
                    {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'value',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    [length]: 1
                  ]
                }
              }
            },
            {
              token: 'If',
              ifBlock: {
                expression: {
                  token: 'BE',
                  operator: '==',
                  left: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'head',
                    type: 'unknown',
                    typeStr: 'unknown'
                  },
                  right: {
                    token: 'V',
                    type: 'undefined',
                    value: undefined,
                    typeStr: 'undefined',
                    numLiveReferences: 0
                  }
                },
                within: [
                  {
                    token: 'R',
                    variable: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'head',
                      type: 'instance',
                      typeStr: 'Node'
                    },
                    equals: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'newNode',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  {
                    token: 'R',
                    variable: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'tail',
                      type: 'instance',
                      typeStr: 'Node'
                    },
                    equals: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'head',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 2
                ]
              },
              elifBlocks: [ [length]: 0 ],
              elseBlock: {
                token: 'E',
                within: [
                  {
                    token: 'FC',
                    functionName: 'linkNext',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'newNode',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'tail', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'linkPrev',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'tail',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'newNode', [length]: 1 ] }
                  },
                  {
                    token: 'R',
                    variable: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'tail',
                      type: 'instance',
                      typeStr: 'Node'
                    },
                    equals: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'newNode',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 3
                ]
              }
            },
            {
              token: 'R',
              variable: {
                token: 'VA',
                scope: undefined,
                variableName: 'length',
                type: 'number',
                typeStr: 'number'
              },
              equals: {
                token: 'AE',
                left: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'length',
                  type: 'unknown',
                  typeStr: 'unknown'
                },
                right: [
                  {
                    token: 'AO',
                    operation: '+',
                    value: {
                      token: 'V',
                      type: 'number',
                      value: 1,
                      typeStr: 'number',
                      numLiveReferences: 0
                    }
                  },
                  [length]: 1
                ]
              }
            },
            { token: 'RT', value: undefined },
            [length]: 4
          ]
        },
        {
          token: 'F',
          parent: [Circular *2],
          name: 'getNode',
          scopes: Map(0) {},
          args: {
            token: 'A',
            args: [
              { token: 'AD', type: 'number', identifier: 'index' },
              [length]: 1
            ]
          },
          within: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'nextNode',
              equals: {
                token: 'VA',
                scope: undefined,
                variableName: 'head',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            {
              token: 'D',
              type: 'number',
              identifier: 'i',
              equals: {
                token: 'V',
                type: 'number',
                value: 0,
                typeStr: 'number',
                numLiveReferences: 0
              }
            },
            {
              token: 'W',
              expression: {
                token: 'BE',
                operator: '<',
                left: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'i',
                  type: 'unknown',
                  typeStr: 'unknown'
                },
                right: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'index',
                  type: 'unknown',
                  typeStr: 'unknown'
                }
              },
              within: [
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'nextNode',
                    type: 'instance',
                    typeStr: 'Node'
                  },
                  equals: {
                    token: 'FC',
                    functionName: 'getNext',
                    args: undefined,
                    scope: { token: 'S', scope: [ 'nextNode', [length]: 1 ] }
                  }
                },
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'i',
                    type: 'number',
                    typeStr: 'number'
                  },
                  equals: {
                    token: 'AE',
                    left: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'i',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    right: [
                      {
                        token: 'AO',
                        operation: '+',
                        value: {
                          token: 'V',
                          type: 'number',
                          value: 1,
                          typeStr: 'number',
                          numLiveReferences: 0
                        }
                      },
                      [length]: 1
                    ]
                  }
                },
                [length]: 2
              ]
            },
            {
              token: 'RT',
              value: {
                token: 'VA',
                scope: undefined,
                variableName: 'nextNode',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            [length]: 4
          ]
        },
        {
          token: 'F',
          parent: [Circular *2],
          name: 'get',
          scopes: Map(0) {},
          args: {
            token: 'A',
            args: [
              { token: 'AD', type: 'number', identifier: 'index' },
              [length]: 1
            ]
          },
          within: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'inQ',
              equals: {
                token: 'FC',
                functionName: 'getNode',
                args: {
                  token: 'AI',
                  args: [
                    {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'index',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    [length]: 1
                  ]
                },
                scope: undefined
              }
            },
            {
              token: 'RT',
              value: {
                token: 'FC',
                functionName: 'getValue',
                args: undefined,
                scope: { token: 'S', scope: [ 'inQ', [length]: 1 ] }
              }
            },
            [length]: 2
          ]
        },
        {
          token: 'F',
          parent: [Circular *2],
          name: 'remove',
          scopes: Map(0) {},
          args: {
            token: 'A',
            args: [
              { token: 'AD', type: 'number', identifier: 'index' },
              [length]: 1
            ]
          },
          within: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'removed',
              equals: {
                token: 'FC',
                functionName: 'getNode',
                args: {
                  token: 'AI',
                  args: [
                    {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'index',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    [length]: 1
                  ]
                },
                scope: undefined
              }
            },
            {
              token: 'FC',
              functionName: 'linkNext',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'undefined',
                    value: undefined,
                    typeStr: 'undefined',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'linkPrev',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'undefined',
                    value: undefined,
                    typeStr: 'undefined',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
            },
            {
              token: 'D',
              type: 'Node',
              identifier: 'next',
              equals: {
                token: 'FC',
                functionName: 'getNext',
                args: undefined,
                scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
              }
            },
            {
              token: 'D',
              type: 'Node',
              identifier: 'prev',
              equals: {
                token: 'FC',
                functionName: 'getPrev',
                args: undefined,
                scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
              }
            },
            {
              token: 'If',
              ifBlock: {
                expression: {
                  token: 'BE',
                  operator: '!=',
                  left: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'next',
                    type: 'unknown',
                    typeStr: 'unknown'
                  },
                  right: {
                    token: 'V',
                    type: 'undefined',
                    value: undefined,
                    typeStr: 'undefined',
                    numLiveReferences: 0
                  }
                },
                within: [
                  {
                    token: 'FC',
                    functionName: 'linkPrev',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'prev',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'next', [length]: 1 ] }
                  },
                  [length]: 1
                ]
              },
              elifBlocks: [ [length]: 0 ],
              elseBlock: undefined
            },
            {
              token: 'If',
              ifBlock: {
                expression: {
                  token: 'BE',
                  operator: '!=',
                  left: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'prev',
                    type: 'unknown',
                    typeStr: 'unknown'
                  },
                  right: {
                    token: 'V',
                    type: 'undefined',
                    value: undefined,
                    typeStr: 'undefined',
                    numLiveReferences: 0
                  }
                },
                within: [
                  {
                    token: 'FC',
                    functionName: 'linkNext',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'next',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'prev', [length]: 1 ] }
                  },
                  [length]: 1
                ]
              },
              elifBlocks: [ [length]: 0 ],
              elseBlock: undefined
            },
            {
              token: 'R',
              variable: {
                token: 'VA',
                scope: undefined,
                variableName: 'length',
                type: 'number',
                typeStr: 'number'
              },
              equals: {
                token: 'AE',
                left: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'length',
                  type: 'unknown',
                  typeStr: 'unknown'
                },
                right: [
                  {
                    token: 'AO',
                    operation: '-',
                    value: {
                      token: 'V',
                      type: 'number',
                      value: 1,
                      typeStr: 'number',
                      numLiveReferences: 0
                    }
                  },
                  [length]: 1
                ]
              }
            },
            {
              token: 'RT',
              value: {
                token: 'FC',
                functionName: 'getValue',
                args: undefined,
                scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
              }
            },
            [length]: 9
          ]
        },
        [length]: 4
      ],
      construct: {
        token: 'CO',
        parent: [Circular *2],
        args: undefined,
        within: [ [length]: 0 ]
      }
    },
    'Node' => <ref *3> {
      token: 'C',
      name: 'Node',
      scope: Map(0) {},
      globalVars: [
        {
          token: 'D',
          type: 'Node',
          identifier: 'next',
          equals: undefined
        },
        {
          token: 'D',
          type: 'Node',
          identifier: 'prev',
          equals: undefined
        },
        {
          token: 'D',
          type: 'number',
          identifier: 'value',
          equals: undefined
        },
        [length]: 3
      ],
      functions: [
        {
          token: 'F',
          parent: [Circular *3],
          name: 'linkNext',
          scopes: Map(0) {},
          args: {
            token: 'A',
            args: [
              { token: 'AD', type: 'Node', identifier: 'n' },
              [length]: 1
            ]
          },
          within: [
            {
              token: 'R',
              variable: {
                token: 'VA',
                scope: undefined,
                variableName: 'next',
                type: 'undefined',
                typeStr: 'Node'
              },
              equals: {
                token: 'VA',
                scope: undefined,
                variableName: 'n',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            { token: 'RT', value: undefined },
            [length]: 2
          ]
        },
        {
          token: 'F',
          parent: [Circular *3],
          name: 'linkPrev',
          scopes: Map(0) {},
          args: {
            token: 'A',
            args: [
              { token: 'AD', type: 'Node', identifier: 'n' },
              [length]: 1
            ]
          },
          within: [
            {
              token: 'R',
              variable: {
                token: 'VA',
                scope: undefined,
                variableName: 'prev',
                type: 'undefined',
                typeStr: 'Node'
              },
              equals: {
                token: 'VA',
                scope: undefined,
                variableName: 'n',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            { token: 'RT', value: undefined },
            [length]: 2
          ]
        },
        {
          token: 'F',
          parent: [Circular *3],
          name: 'getNext',
          scopes: Map(0) {},
          args: undefined,
          within: [
            {
              token: 'RT',
              value: {
                token: 'VA',
                scope: undefined,
                variableName: 'next',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            [length]: 1
          ]
        },
        {
          token: 'F',
          parent: [Circular *3],
          name: 'getPrev',
          scopes: Map(0) {},
          args: undefined,
          within: [
            {
              token: 'RT',
              value: {
                token: 'VA',
                scope: undefined,
                variableName: 'prev',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            [length]: 1
          ]
        },
        {
          token: 'F',
          parent: [Circular *3],
          name: 'getValue',
          scopes: Map(0) {},
          args: undefined,
          within: [
            {
              token: 'RT',
              value: {
                token: 'VA',
                scope: undefined,
                variableName: 'value',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            [length]: 1
          ]
        },
        [length]: 5
      ],
      construct: {
        token: 'CO',
        parent: [Circular *3],
        args: {
          token: 'A',
          args: [
            { token: 'AD', type: 'number', identifier: 'x' },
            [length]: 1
          ]
        },
        within: [
          {
            token: 'R',
            variable: {
              token: 'VA',
              scope: undefined,
              variableName: 'value',
              type: 'number',
              typeStr: 'number'
            },
            equals: {
              token: 'VA',
              scope: undefined,
              variableName: 'x',
              type: 'unknown',
              typeStr: 'unknown'
            }
          },
          [length]: 1
        ]
      }
    }
  },
  functions: Map(3) {
    <ref *1> {
      token: 'C',
      name: 'Main',
      scope: Map(0) {},
      globalVars: [ [length]: 0 ],
      functions: [
        {
          token: 'F',
          parent: [Circular *1],
          name: 'main',
          scopes: Map(0) {},
          args: undefined,
          within: [
            {
              token: 'D',
              type: 'DoublyLinkedList',
              identifier: 'list',
              equals: {
                token: 'I',
                className: 'DoublyLinkedList',
                args: undefined
              }
            },
            {
              token: 'FC',
              functionName: 'add',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'number',
                    value: 7,
                    typeStr: 'number',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'add',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'number',
                    value: 12,
                    typeStr: 'number',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'add',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'number',
                    value: 8,
                    typeStr: 'number',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'add',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'number',
                    value: 42,
                    typeStr: 'number',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: 'All elements:',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'D',
              type: 'number',
              identifier: 'i',
              equals: {
                token: 'V',
                type: 'number',
                value: 0,
                typeStr: 'number',
                numLiveReferences: 0
              }
            },
            {
              token: 'W',
              expression: {
                token: 'BE',
                operator: '<',
                left: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'i',
                  type: 'unknown',
                  typeStr: 'unknown'
                },
                right: {
                  token: 'VA',
                  scope: { token: 'S', scope: [ 'list', [length]: 1 ] },
                  variableName: 'length',
                  type: 'unknown',
                  typeStr: 'unknown'
                }
              },
              within: [
                {
                  token: 'FC',
                  functionName: 'log',
                  args: {
                    token: 'AI',
                    args: [
                      {
                        token: 'FC',
                        functionName: 'get',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'VA',
                              scope: undefined,
                              variableName: 'i',
                              type: 'unknown',
                              typeStr: 'unknown'
                            },
                            [length]: 1
                          ]
                        },
                        scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                      },
                      [length]: 1
                    ]
                  },
                  scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
                },
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'i',
                    type: 'number',
                    typeStr: 'number'
                  },
                  equals: {
                    token: 'AE',
                    left: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'i',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    right: [
                      {
                        token: 'AO',
                        operation: '+',
                        value: {
                          token: 'V',
                          type: 'number',
                          value: 1,
                          typeStr: 'number',
                          numLiveReferences: 0
                        }
                      },
                      [length]: 1
                    ]
                  }
                },
                [length]: 2
              ]
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: '',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: 'Got second element:',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'FC',
                    functionName: 'get',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'number',
                          value: 1,
                          typeStr: 'number',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: '',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: 'Removed third element:',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'FC',
                    functionName: 'remove',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'number',
                          value: 2,
                          typeStr: 'number',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: '',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: 'Removed first element:',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'FC',
                    functionName: 'remove',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'V',
                          type: 'number',
                          value: 0,
                          typeStr: 'number',
                          numLiveReferences: 0
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: '',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'string',
                    value: 'Final list length:',
                    typeStr: 'string',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'log',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'VA',
                    scope: { token: 'S', scope: [ 'list', [length]: 1 ] },
                    variableName: 'length',
                    type: 'unknown',
                    typeStr: 'unknown'
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
            },
            { token: 'RT', value: undefined },
            [length]: 21
          ]
        },
        [length]: 1
      ],
      construct: {
        token: 'CO',
        parent: [Circular *1],
        args: undefined,
        within: [ [length]: 0 ]
      }
    } => Map(1) {
      'main' => <ref *4> {
        token: 'F',
        parent: <ref *1> {
          token: 'C',
          name: 'Main',
          scope: Map(0) {},
          globalVars: [ [length]: 0 ],
          functions: [ [Circular *4], [length]: 1 ],
          construct: {
            token: 'CO',
            parent: [Circular *1],
            args: undefined,
            within: [ [length]: 0 ]
          }
        },
        name: 'main',
        scopes: Map(0) {},
        args: undefined,
        within: [
          {
            token: 'D',
            type: 'DoublyLinkedList',
            identifier: 'list',
            equals: {
              token: 'I',
              className: 'DoublyLinkedList',
              args: undefined
            }
          },
          {
            token: 'FC',
            functionName: 'add',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'V',
                  type: 'number',
                  value: 7,
                  typeStr: 'number',
                  numLiveReferences: 0
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
          },
          {
            token: 'FC',
            functionName: 'add',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'V',
                  type: 'number',
                  value: 12,
                  typeStr: 'number',
                  numLiveReferences: 0
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
          },
          {
            token: 'FC',
            functionName: 'add',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'V',
                  type: 'number',
                  value: 8,
                  typeStr: 'number',
                  numLiveReferences: 0
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
          },
          {
            token: 'FC',
            functionName: 'add',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'V',
                  type: 'number',
                  value: 42,
                  typeStr: 'number',
                  numLiveReferences: 0
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
          },
          {
            token: 'FC',
            functionName: 'log',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'V',
                  type: 'string',
                  value: 'All elements:',
                  typeStr: 'string',
                  numLiveReferences: 0
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
          },
          {
            token: 'D',
            type: 'number',
            identifier: 'i',
            equals: {
              token: 'V',
              type: 'number',
              value: 0,
              typeStr: 'number',
              numLiveReferences: 0
            }
          },
          {
            token: 'W',
            expression: {
              token: 'BE',
              operator: '<',
              left: {
                token: 'VA',
                scope: undefined,
                variableName: 'i',
                type: 'unknown',
                typeStr: 'unknown'
              },
              right: {
                token: 'VA',
                scope: { token: 'S', scope: [ 'list', [length]: 1 ] },
                variableName: 'length',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            within: [
              {
                token: 'FC',
                functionName: 'log',
                args: {
                  token: 'AI',
                  args: [
                    {
                      token: 'FC',
                      functionName: 'get',
                      args: {
                        token: 'AI',
                        args: [
                          {
                            token: 'VA',
                            scope: undefined,
                            variableName: 'i',
                            type: 'unknown',
                            typeStr: 'unknown'
                          },
                          [length]: 1
                        ]
                      },
                      scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                    },
                    [length]: 1
                  ]
                },
                scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
              },
              {
                token: 'R',
                variable: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'i',
                  type: 'number',
                  typeStr: 'number'
                },
                equals: {
                  token: 'AE',
                  left: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'i',
                    type: 'unknown',
                    typeStr: 'unknown'
                  },
                  right: [
                    {
                      token: 'AO',
                      operation: '+',
                      value: {
                        token: 'V',
                        type: 'number',
                        value: 1,
                        typeStr: 'number',
                        numLiveReferences: 0
                      }
                    },
                    [length]: 1
                  ]
                }
              },
              [length]: 2
            ]
          },
          {
            token: 'FC',
            functionName: 'log',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'V',
                  type: 'string',
                  value: '',
                  typeStr: 'string',
                  numLiveReferences: 0
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
          },
          {
            token: 'FC',
            functionName: 'log',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'V',
                  type: 'string',
                  value: 'Got second element:',
                  typeStr: 'string',
                  numLiveReferences: 0
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
          },
          {
            token: 'FC',
            functionName: 'log',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'FC',
                  functionName: 'get',
                  args: {
                    token: 'AI',
                    args: [
                      {
                        token: 'V',
                        type: 'number',
                        value: 1,
                        typeStr: 'number',
                        numLiveReferences: 0
                      },
                      [length]: 1
                    ]
                  },
                  scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
          },
          {
            token: 'FC',
            functionName: 'log',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'V',
                  type: 'string',
                  value: '',
                  typeStr: 'string',
                  numLiveReferences: 0
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
          },
          {
            token: 'FC',
            functionName: 'log',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'V',
                  type: 'string',
                  value: 'Removed third element:',
                  typeStr: 'string',
                  numLiveReferences: 0
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
          },
          {
            token: 'FC',
            functionName: 'log',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'FC',
                  functionName: 'remove',
                  args: {
                    token: 'AI',
                    args: [
                      {
                        token: 'V',
                        type: 'number',
                        value: 2,
                        typeStr: 'number',
                        numLiveReferences: 0
                      },
                      [length]: 1
                    ]
                  },
                  scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
          },
          {
            token: 'FC',
            functionName: 'log',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'V',
                  type: 'string',
                  value: '',
                  typeStr: 'string',
                  numLiveReferences: 0
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
          },
          {
            token: 'FC',
            functionName: 'log',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'V',
                  type: 'string',
                  value: 'Removed first element:',
                  typeStr: 'string',
                  numLiveReferences: 0
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
          },
          {
            token: 'FC',
            functionName: 'log',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'FC',
                  functionName: 'remove',
                  args: {
                    token: 'AI',
                    args: [
                      {
                        token: 'V',
                        type: 'number',
                        value: 0,
                        typeStr: 'number',
                        numLiveReferences: 0
                      },
                      [length]: 1
                    ]
                  },
                  scope: { token: 'S', scope: [ 'list', [length]: 1 ] }
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
          },
          {
            token: 'FC',
            functionName: 'log',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'V',
                  type: 'string',
                  value: '',
                  typeStr: 'string',
                  numLiveReferences: 0
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
          },
          {
            token: 'FC',
            functionName: 'log',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'V',
                  type: 'string',
                  value: 'Final list length:',
                  typeStr: 'string',
                  numLiveReferences: 0
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
          },
          {
            token: 'FC',
            functionName: 'log',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'VA',
                  scope: { token: 'S', scope: [ 'list', [length]: 1 ] },
                  variableName: 'length',
                  type: 'unknown',
                  typeStr: 'unknown'
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'console', [length]: 1 ] }
          },
          { token: 'RT', value: undefined },
          [length]: 21
        ]
      }
    },
    <ref *2> {
      token: 'C',
      name: 'DoublyLinkedList',
      scope: Map(0) {},
      globalVars: [
        {
          token: 'D',
          type: 'Node',
          identifier: 'head',
          equals: undefined
        },
        {
          token: 'D',
          type: 'Node',
          identifier: 'tail',
          equals: undefined
        },
        {
          token: 'D',
          type: 'number',
          identifier: 'length',
          equals: {
            token: 'V',
            type: 'number',
            value: 0,
            typeStr: 'number',
            numLiveReferences: 0
          }
        },
        [length]: 3
      ],
      functions: [
        {
          token: 'F',
          parent: [Circular *2],
          name: 'add',
          scopes: Map(0) {},
          args: {
            token: 'A',
            args: [
              { token: 'AD', type: 'number', identifier: 'value' },
              [length]: 1
            ]
          },
          within: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'newNode',
              equals: {
                token: 'I',
                className: 'Node',
                args: {
                  token: 'AI',
                  args: [
                    {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'value',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    [length]: 1
                  ]
                }
              }
            },
            {
              token: 'If',
              ifBlock: {
                expression: {
                  token: 'BE',
                  operator: '==',
                  left: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'head',
                    type: 'unknown',
                    typeStr: 'unknown'
                  },
                  right: {
                    token: 'V',
                    type: 'undefined',
                    value: undefined,
                    typeStr: 'undefined',
                    numLiveReferences: 0
                  }
                },
                within: [
                  {
                    token: 'R',
                    variable: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'head',
                      type: 'instance',
                      typeStr: 'Node'
                    },
                    equals: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'newNode',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  {
                    token: 'R',
                    variable: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'tail',
                      type: 'instance',
                      typeStr: 'Node'
                    },
                    equals: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'head',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 2
                ]
              },
              elifBlocks: [ [length]: 0 ],
              elseBlock: {
                token: 'E',
                within: [
                  {
                    token: 'FC',
                    functionName: 'linkNext',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'newNode',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'tail', [length]: 1 ] }
                  },
                  {
                    token: 'FC',
                    functionName: 'linkPrev',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'tail',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'newNode', [length]: 1 ] }
                  },
                  {
                    token: 'R',
                    variable: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'tail',
                      type: 'instance',
                      typeStr: 'Node'
                    },
                    equals: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'newNode',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  [length]: 3
                ]
              }
            },
            {
              token: 'R',
              variable: {
                token: 'VA',
                scope: undefined,
                variableName: 'length',
                type: 'number',
                typeStr: 'number'
              },
              equals: {
                token: 'AE',
                left: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'length',
                  type: 'unknown',
                  typeStr: 'unknown'
                },
                right: [
                  {
                    token: 'AO',
                    operation: '+',
                    value: {
                      token: 'V',
                      type: 'number',
                      value: 1,
                      typeStr: 'number',
                      numLiveReferences: 0
                    }
                  },
                  [length]: 1
                ]
              }
            },
            { token: 'RT', value: undefined },
            [length]: 4
          ]
        },
        {
          token: 'F',
          parent: [Circular *2],
          name: 'getNode',
          scopes: Map(0) {},
          args: {
            token: 'A',
            args: [
              { token: 'AD', type: 'number', identifier: 'index' },
              [length]: 1
            ]
          },
          within: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'nextNode',
              equals: {
                token: 'VA',
                scope: undefined,
                variableName: 'head',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            {
              token: 'D',
              type: 'number',
              identifier: 'i',
              equals: {
                token: 'V',
                type: 'number',
                value: 0,
                typeStr: 'number',
                numLiveReferences: 0
              }
            },
            {
              token: 'W',
              expression: {
                token: 'BE',
                operator: '<',
                left: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'i',
                  type: 'unknown',
                  typeStr: 'unknown'
                },
                right: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'index',
                  type: 'unknown',
                  typeStr: 'unknown'
                }
              },
              within: [
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'nextNode',
                    type: 'instance',
                    typeStr: 'Node'
                  },
                  equals: {
                    token: 'FC',
                    functionName: 'getNext',
                    args: undefined,
                    scope: { token: 'S', scope: [ 'nextNode', [length]: 1 ] }
                  }
                },
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'i',
                    type: 'number',
                    typeStr: 'number'
                  },
                  equals: {
                    token: 'AE',
                    left: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'i',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    right: [
                      {
                        token: 'AO',
                        operation: '+',
                        value: {
                          token: 'V',
                          type: 'number',
                          value: 1,
                          typeStr: 'number',
                          numLiveReferences: 0
                        }
                      },
                      [length]: 1
                    ]
                  }
                },
                [length]: 2
              ]
            },
            {
              token: 'RT',
              value: {
                token: 'VA',
                scope: undefined,
                variableName: 'nextNode',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            [length]: 4
          ]
        },
        {
          token: 'F',
          parent: [Circular *2],
          name: 'get',
          scopes: Map(0) {},
          args: {
            token: 'A',
            args: [
              { token: 'AD', type: 'number', identifier: 'index' },
              [length]: 1
            ]
          },
          within: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'inQ',
              equals: {
                token: 'FC',
                functionName: 'getNode',
                args: {
                  token: 'AI',
                  args: [
                    {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'index',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    [length]: 1
                  ]
                },
                scope: undefined
              }
            },
            {
              token: 'RT',
              value: {
                token: 'FC',
                functionName: 'getValue',
                args: undefined,
                scope: { token: 'S', scope: [ 'inQ', [length]: 1 ] }
              }
            },
            [length]: 2
          ]
        },
        {
          token: 'F',
          parent: [Circular *2],
          name: 'remove',
          scopes: Map(0) {},
          args: {
            token: 'A',
            args: [
              { token: 'AD', type: 'number', identifier: 'index' },
              [length]: 1
            ]
          },
          within: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'removed',
              equals: {
                token: 'FC',
                functionName: 'getNode',
                args: {
                  token: 'AI',
                  args: [
                    {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'index',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    [length]: 1
                  ]
                },
                scope: undefined
              }
            },
            {
              token: 'FC',
              functionName: 'linkNext',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'undefined',
                    value: undefined,
                    typeStr: 'undefined',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
            },
            {
              token: 'FC',
              functionName: 'linkPrev',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'V',
                    type: 'undefined',
                    value: undefined,
                    typeStr: 'undefined',
                    numLiveReferences: 0
                  },
                  [length]: 1
                ]
              },
              scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
            },
            {
              token: 'D',
              type: 'Node',
              identifier: 'next',
              equals: {
                token: 'FC',
                functionName: 'getNext',
                args: undefined,
                scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
              }
            },
            {
              token: 'D',
              type: 'Node',
              identifier: 'prev',
              equals: {
                token: 'FC',
                functionName: 'getPrev',
                args: undefined,
                scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
              }
            },
            {
              token: 'If',
              ifBlock: {
                expression: {
                  token: 'BE',
                  operator: '!=',
                  left: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'next',
                    type: 'unknown',
                    typeStr: 'unknown'
                  },
                  right: {
                    token: 'V',
                    type: 'undefined',
                    value: undefined,
                    typeStr: 'undefined',
                    numLiveReferences: 0
                  }
                },
                within: [
                  {
                    token: 'FC',
                    functionName: 'linkPrev',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'prev',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'next', [length]: 1 ] }
                  },
                  [length]: 1
                ]
              },
              elifBlocks: [ [length]: 0 ],
              elseBlock: undefined
            },
            {
              token: 'If',
              ifBlock: {
                expression: {
                  token: 'BE',
                  operator: '!=',
                  left: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'prev',
                    type: 'unknown',
                    typeStr: 'unknown'
                  },
                  right: {
                    token: 'V',
                    type: 'undefined',
                    value: undefined,
                    typeStr: 'undefined',
                    numLiveReferences: 0
                  }
                },
                within: [
                  {
                    token: 'FC',
                    functionName: 'linkNext',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'next',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    },
                    scope: { token: 'S', scope: [ 'prev', [length]: 1 ] }
                  },
                  [length]: 1
                ]
              },
              elifBlocks: [ [length]: 0 ],
              elseBlock: undefined
            },
            {
              token: 'R',
              variable: {
                token: 'VA',
                scope: undefined,
                variableName: 'length',
                type: 'number',
                typeStr: 'number'
              },
              equals: {
                token: 'AE',
                left: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'length',
                  type: 'unknown',
                  typeStr: 'unknown'
                },
                right: [
                  {
                    token: 'AO',
                    operation: '-',
                    value: {
                      token: 'V',
                      type: 'number',
                      value: 1,
                      typeStr: 'number',
                      numLiveReferences: 0
                    }
                  },
                  [length]: 1
                ]
              }
            },
            {
              token: 'RT',
              value: {
                token: 'FC',
                functionName: 'getValue',
                args: undefined,
                scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
              }
            },
            [length]: 9
          ]
        },
        [length]: 4
      ],
      construct: {
        token: 'CO',
        parent: [Circular *2],
        args: undefined,
        within: [ [length]: 0 ]
      }
    } => Map(4) {
      'add' => <ref *5> {
        token: 'F',
        parent: <ref *2> {
          token: 'C',
          name: 'DoublyLinkedList',
          scope: Map(0) {},
          globalVars: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'head',
              equals: undefined
            },
            {
              token: 'D',
              type: 'Node',
              identifier: 'tail',
              equals: undefined
            },
            {
              token: 'D',
              type: 'number',
              identifier: 'length',
              equals: {
                token: 'V',
                type: 'number',
                value: 0,
                typeStr: 'number',
                numLiveReferences: 0
              }
            },
            [length]: 3
          ],
          functions: [
            [Circular *5],
            {
              token: 'F',
              parent: [Circular *2],
              name: 'getNode',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'number', identifier: 'index' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'nextNode',
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'head',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                {
                  token: 'D',
                  type: 'number',
                  identifier: 'i',
                  equals: {
                    token: 'V',
                    type: 'number',
                    value: 0,
                    typeStr: 'number',
                    numLiveReferences: 0
                  }
                },
                {
                  token: 'W',
                  expression: {
                    token: 'BE',
                    operator: '<',
                    left: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'i',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    right: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'index',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  within: [
                    {
                      token: 'R',
                      variable: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'nextNode',
                        type: 'instance',
                        typeStr: 'Node'
                      },
                      equals: {
                        token: 'FC',
                        functionName: 'getNext',
                        args: undefined,
                        scope: {
                          token: 'S',
                          scope: [ 'nextNode', [length]: 1 ]
                        }
                      }
                    },
                    {
                      token: 'R',
                      variable: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'i',
                        type: 'number',
                        typeStr: 'number'
                      },
                      equals: {
                        token: 'AE',
                        left: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'i',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        right: [
                          {
                            token: 'AO',
                            operation: '+',
                            value: {
                              token: 'V',
                              type: 'number',
                              value: 1,
                              typeStr: 'number',
                              numLiveReferences: 0
                            }
                          },
                          [length]: 1
                        ]
                      }
                    },
                    [length]: 2
                  ]
                },
                {
                  token: 'RT',
                  value: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'nextNode',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 4
              ]
            },
            {
              token: 'F',
              parent: [Circular *2],
              name: 'get',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'number', identifier: 'index' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'inQ',
                  equals: {
                    token: 'FC',
                    functionName: 'getNode',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'index',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    },
                    scope: undefined
                  }
                },
                {
                  token: 'RT',
                  value: {
                    token: 'FC',
                    functionName: 'getValue',
                    args: undefined,
                    scope: { token: 'S', scope: [ 'inQ', [length]: 1 ] }
                  }
                },
                [length]: 2
              ]
            },
            {
              token: 'F',
              parent: [Circular *2],
              name: 'remove',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'number', identifier: 'index' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'removed',
                  equals: {
                    token: 'FC',
                    functionName: 'getNode',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'index',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    },
                    scope: undefined
                  }
                },
                {
                  token: 'FC',
                  functionName: 'linkNext',
                  args: {
                    token: 'AI',
                    args: [
                      {
                        token: 'V',
                        type: 'undefined',
                        value: undefined,
                        typeStr: 'undefined',
                        numLiveReferences: 0
                      },
                      [length]: 1
                    ]
                  },
                  scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                },
                {
                  token: 'FC',
                  functionName: 'linkPrev',
                  args: {
                    token: 'AI',
                    args: [
                      {
                        token: 'V',
                        type: 'undefined',
                        value: undefined,
                        typeStr: 'undefined',
                        numLiveReferences: 0
                      },
                      [length]: 1
                    ]
                  },
                  scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                },
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'next',
                  equals: {
                    token: 'FC',
                    functionName: 'getNext',
                    args: undefined,
                    scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                  }
                },
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'prev',
                  equals: {
                    token: 'FC',
                    functionName: 'getPrev',
                    args: undefined,
                    scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                  }
                },
                {
                  token: 'If',
                  ifBlock: {
                    expression: {
                      token: 'BE',
                      operator: '!=',
                      left: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'next',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      right: {
                        token: 'V',
                        type: 'undefined',
                        value: undefined,
                        typeStr: 'undefined',
                        numLiveReferences: 0
                      }
                    },
                    within: [
                      {
                        token: 'FC',
                        functionName: 'linkPrev',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'VA',
                              scope: undefined,
                              variableName: 'prev',
                              type: 'unknown',
                              typeStr: 'unknown'
                            },
                            [length]: 1
                          ]
                        },
                        scope: { token: 'S', scope: [ 'next', [length]: 1 ] }
                      },
                      [length]: 1
                    ]
                  },
                  elifBlocks: [ [length]: 0 ],
                  elseBlock: undefined
                },
                {
                  token: 'If',
                  ifBlock: {
                    expression: {
                      token: 'BE',
                      operator: '!=',
                      left: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'prev',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      right: {
                        token: 'V',
                        type: 'undefined',
                        value: undefined,
                        typeStr: 'undefined',
                        numLiveReferences: 0
                      }
                    },
                    within: [
                      {
                        token: 'FC',
                        functionName: 'linkNext',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'VA',
                              scope: undefined,
                              variableName: 'next',
                              type: 'unknown',
                              typeStr: 'unknown'
                            },
                            [length]: 1
                          ]
                        },
                        scope: { token: 'S', scope: [ 'prev', [length]: 1 ] }
                      },
                      [length]: 1
                    ]
                  },
                  elifBlocks: [ [length]: 0 ],
                  elseBlock: undefined
                },
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'length',
                    type: 'number',
                    typeStr: 'number'
                  },
                  equals: {
                    token: 'AE',
                    left: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'length',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    right: [
                      {
                        token: 'AO',
                        operation: '-',
                        value: {
                          token: 'V',
                          type: 'number',
                          value: 1,
                          typeStr: 'number',
                          numLiveReferences: 0
                        }
                      },
                      [length]: 1
                    ]
                  }
                },
                {
                  token: 'RT',
                  value: {
                    token: 'FC',
                    functionName: 'getValue',
                    args: undefined,
                    scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                  }
                },
                [length]: 9
              ]
            },
            [length]: 4
          ],
          construct: {
            token: 'CO',
            parent: [Circular *2],
            args: undefined,
            within: [ [length]: 0 ]
          }
        },
        name: 'add',
        scopes: Map(0) {},
        args: {
          token: 'A',
          args: [
            { token: 'AD', type: 'number', identifier: 'value' },
            [length]: 1
          ]
        },
        within: [
          {
            token: 'D',
            type: 'Node',
            identifier: 'newNode',
            equals: {
              token: 'I',
              className: 'Node',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'value',
                    type: 'unknown',
                    typeStr: 'unknown'
                  },
                  [length]: 1
                ]
              }
            }
          },
          {
            token: 'If',
            ifBlock: {
              expression: {
                token: 'BE',
                operator: '==',
                left: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'head',
                  type: 'unknown',
                  typeStr: 'unknown'
                },
                right: {
                  token: 'V',
                  type: 'undefined',
                  value: undefined,
                  typeStr: 'undefined',
                  numLiveReferences: 0
                }
              },
              within: [
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'head',
                    type: 'instance',
                    typeStr: 'Node'
                  },
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'newNode',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'tail',
                    type: 'instance',
                    typeStr: 'Node'
                  },
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'head',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 2
              ]
            },
            elifBlocks: [ [length]: 0 ],
            elseBlock: {
              token: 'E',
              within: [
                {
                  token: 'FC',
                  functionName: 'linkNext',
                  args: {
                    token: 'AI',
                    args: [
                      {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'newNode',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      [length]: 1
                    ]
                  },
                  scope: { token: 'S', scope: [ 'tail', [length]: 1 ] }
                },
                {
                  token: 'FC',
                  functionName: 'linkPrev',
                  args: {
                    token: 'AI',
                    args: [
                      {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'tail',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      [length]: 1
                    ]
                  },
                  scope: { token: 'S', scope: [ 'newNode', [length]: 1 ] }
                },
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'tail',
                    type: 'instance',
                    typeStr: 'Node'
                  },
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'newNode',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 3
              ]
            }
          },
          {
            token: 'R',
            variable: {
              token: 'VA',
              scope: undefined,
              variableName: 'length',
              type: 'number',
              typeStr: 'number'
            },
            equals: {
              token: 'AE',
              left: {
                token: 'VA',
                scope: undefined,
                variableName: 'length',
                type: 'unknown',
                typeStr: 'unknown'
              },
              right: [
                {
                  token: 'AO',
                  operation: '+',
                  value: {
                    token: 'V',
                    type: 'number',
                    value: 1,
                    typeStr: 'number',
                    numLiveReferences: 0
                  }
                },
                [length]: 1
              ]
            }
          },
          { token: 'RT', value: undefined },
          [length]: 4
        ]
      },
      'getNode' => <ref *6> {
        token: 'F',
        parent: <ref *2> {
          token: 'C',
          name: 'DoublyLinkedList',
          scope: Map(0) {},
          globalVars: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'head',
              equals: undefined
            },
            {
              token: 'D',
              type: 'Node',
              identifier: 'tail',
              equals: undefined
            },
            {
              token: 'D',
              type: 'number',
              identifier: 'length',
              equals: {
                token: 'V',
                type: 'number',
                value: 0,
                typeStr: 'number',
                numLiveReferences: 0
              }
            },
            [length]: 3
          ],
          functions: [
            <ref *5> {
              token: 'F',
              parent: [Circular *2],
              name: 'add',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'number', identifier: 'value' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'newNode',
                  equals: {
                    token: 'I',
                    className: 'Node',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'value',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    }
                  }
                },
                {
                  token: 'If',
                  ifBlock: {
                    expression: {
                      token: 'BE',
                      operator: '==',
                      left: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'head',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      right: {
                        token: 'V',
                        type: 'undefined',
                        value: undefined,
                        typeStr: 'undefined',
                        numLiveReferences: 0
                      }
                    },
                    within: [
                      {
                        token: 'R',
                        variable: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'head',
                          type: 'instance',
                          typeStr: 'Node'
                        },
                        equals: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'newNode',
                          type: 'unknown',
                          typeStr: 'unknown'
                        }
                      },
                      {
                        token: 'R',
                        variable: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'tail',
                          type: 'instance',
                          typeStr: 'Node'
                        },
                        equals: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'head',
                          type: 'unknown',
                          typeStr: 'unknown'
                        }
                      },
                      [length]: 2
                    ]
                  },
                  elifBlocks: [ [length]: 0 ],
                  elseBlock: {
                    token: 'E',
                    within: [
                      {
                        token: 'FC',
                        functionName: 'linkNext',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'VA',
                              scope: undefined,
                              variableName: 'newNode',
                              type: 'unknown',
                              typeStr: 'unknown'
                            },
                            [length]: 1
                          ]
                        },
                        scope: { token: 'S', scope: [ 'tail', [length]: 1 ] }
                      },
                      {
                        token: 'FC',
                        functionName: 'linkPrev',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'VA',
                              scope: undefined,
                              variableName: 'tail',
                              type: 'unknown',
                              typeStr: 'unknown'
                            },
                            [length]: 1
                          ]
                        },
                        scope: {
                          token: 'S',
                          scope: [ 'newNode', [length]: 1 ]
                        }
                      },
                      {
                        token: 'R',
                        variable: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'tail',
                          type: 'instance',
                          typeStr: 'Node'
                        },
                        equals: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'newNode',
                          type: 'unknown',
                          typeStr: 'unknown'
                        }
                      },
                      [length]: 3
                    ]
                  }
                },
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'length',
                    type: 'number',
                    typeStr: 'number'
                  },
                  equals: {
                    token: 'AE',
                    left: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'length',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    right: [
                      {
                        token: 'AO',
                        operation: '+',
                        value: {
                          token: 'V',
                          type: 'number',
                          value: 1,
                          typeStr: 'number',
                          numLiveReferences: 0
                        }
                      },
                      [length]: 1
                    ]
                  }
                },
                { token: 'RT', value: undefined },
                [length]: 4
              ]
            },
            [Circular *6],
            {
              token: 'F',
              parent: [Circular *2],
              name: 'get',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'number', identifier: 'index' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'inQ',
                  equals: {
                    token: 'FC',
                    functionName: 'getNode',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'index',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    },
                    scope: undefined
                  }
                },
                {
                  token: 'RT',
                  value: {
                    token: 'FC',
                    functionName: 'getValue',
                    args: undefined,
                    scope: { token: 'S', scope: [ 'inQ', [length]: 1 ] }
                  }
                },
                [length]: 2
              ]
            },
            {
              token: 'F',
              parent: [Circular *2],
              name: 'remove',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'number', identifier: 'index' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'removed',
                  equals: {
                    token: 'FC',
                    functionName: 'getNode',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'index',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    },
                    scope: undefined
                  }
                },
                {
                  token: 'FC',
                  functionName: 'linkNext',
                  args: {
                    token: 'AI',
                    args: [
                      {
                        token: 'V',
                        type: 'undefined',
                        value: undefined,
                        typeStr: 'undefined',
                        numLiveReferences: 0
                      },
                      [length]: 1
                    ]
                  },
                  scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                },
                {
                  token: 'FC',
                  functionName: 'linkPrev',
                  args: {
                    token: 'AI',
                    args: [
                      {
                        token: 'V',
                        type: 'undefined',
                        value: undefined,
                        typeStr: 'undefined',
                        numLiveReferences: 0
                      },
                      [length]: 1
                    ]
                  },
                  scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                },
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'next',
                  equals: {
                    token: 'FC',
                    functionName: 'getNext',
                    args: undefined,
                    scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                  }
                },
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'prev',
                  equals: {
                    token: 'FC',
                    functionName: 'getPrev',
                    args: undefined,
                    scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                  }
                },
                {
                  token: 'If',
                  ifBlock: {
                    expression: {
                      token: 'BE',
                      operator: '!=',
                      left: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'next',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      right: {
                        token: 'V',
                        type: 'undefined',
                        value: undefined,
                        typeStr: 'undefined',
                        numLiveReferences: 0
                      }
                    },
                    within: [
                      {
                        token: 'FC',
                        functionName: 'linkPrev',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'VA',
                              scope: undefined,
                              variableName: 'prev',
                              type: 'unknown',
                              typeStr: 'unknown'
                            },
                            [length]: 1
                          ]
                        },
                        scope: { token: 'S', scope: [ 'next', [length]: 1 ] }
                      },
                      [length]: 1
                    ]
                  },
                  elifBlocks: [ [length]: 0 ],
                  elseBlock: undefined
                },
                {
                  token: 'If',
                  ifBlock: {
                    expression: {
                      token: 'BE',
                      operator: '!=',
                      left: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'prev',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      right: {
                        token: 'V',
                        type: 'undefined',
                        value: undefined,
                        typeStr: 'undefined',
                        numLiveReferences: 0
                      }
                    },
                    within: [
                      {
                        token: 'FC',
                        functionName: 'linkNext',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'VA',
                              scope: undefined,
                              variableName: 'next',
                              type: 'unknown',
                              typeStr: 'unknown'
                            },
                            [length]: 1
                          ]
                        },
                        scope: { token: 'S', scope: [ 'prev', [length]: 1 ] }
                      },
                      [length]: 1
                    ]
                  },
                  elifBlocks: [ [length]: 0 ],
                  elseBlock: undefined
                },
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'length',
                    type: 'number',
                    typeStr: 'number'
                  },
                  equals: {
                    token: 'AE',
                    left: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'length',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    right: [
                      {
                        token: 'AO',
                        operation: '-',
                        value: {
                          token: 'V',
                          type: 'number',
                          value: 1,
                          typeStr: 'number',
                          numLiveReferences: 0
                        }
                      },
                      [length]: 1
                    ]
                  }
                },
                {
                  token: 'RT',
                  value: {
                    token: 'FC',
                    functionName: 'getValue',
                    args: undefined,
                    scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                  }
                },
                [length]: 9
              ]
            },
            [length]: 4
          ],
          construct: {
            token: 'CO',
            parent: [Circular *2],
            args: undefined,
            within: [ [length]: 0 ]
          }
        },
        name: 'getNode',
        scopes: Map(0) {},
        args: {
          token: 'A',
          args: [
            { token: 'AD', type: 'number', identifier: 'index' },
            [length]: 1
          ]
        },
        within: [
          {
            token: 'D',
            type: 'Node',
            identifier: 'nextNode',
            equals: {
              token: 'VA',
              scope: undefined,
              variableName: 'head',
              type: 'unknown',
              typeStr: 'unknown'
            }
          },
          {
            token: 'D',
            type: 'number',
            identifier: 'i',
            equals: {
              token: 'V',
              type: 'number',
              value: 0,
              typeStr: 'number',
              numLiveReferences: 0
            }
          },
          {
            token: 'W',
            expression: {
              token: 'BE',
              operator: '<',
              left: {
                token: 'VA',
                scope: undefined,
                variableName: 'i',
                type: 'unknown',
                typeStr: 'unknown'
              },
              right: {
                token: 'VA',
                scope: undefined,
                variableName: 'index',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            within: [
              {
                token: 'R',
                variable: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'nextNode',
                  type: 'instance',
                  typeStr: 'Node'
                },
                equals: {
                  token: 'FC',
                  functionName: 'getNext',
                  args: undefined,
                  scope: { token: 'S', scope: [ 'nextNode', [length]: 1 ] }
                }
              },
              {
                token: 'R',
                variable: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'i',
                  type: 'number',
                  typeStr: 'number'
                },
                equals: {
                  token: 'AE',
                  left: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'i',
                    type: 'unknown',
                    typeStr: 'unknown'
                  },
                  right: [
                    {
                      token: 'AO',
                      operation: '+',
                      value: {
                        token: 'V',
                        type: 'number',
                        value: 1,
                        typeStr: 'number',
                        numLiveReferences: 0
                      }
                    },
                    [length]: 1
                  ]
                }
              },
              [length]: 2
            ]
          },
          {
            token: 'RT',
            value: {
              token: 'VA',
              scope: undefined,
              variableName: 'nextNode',
              type: 'unknown',
              typeStr: 'unknown'
            }
          },
          [length]: 4
        ]
      },
      'get' => <ref *7> {
        token: 'F',
        parent: <ref *2> {
          token: 'C',
          name: 'DoublyLinkedList',
          scope: Map(0) {},
          globalVars: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'head',
              equals: undefined
            },
            {
              token: 'D',
              type: 'Node',
              identifier: 'tail',
              equals: undefined
            },
            {
              token: 'D',
              type: 'number',
              identifier: 'length',
              equals: {
                token: 'V',
                type: 'number',
                value: 0,
                typeStr: 'number',
                numLiveReferences: 0
              }
            },
            [length]: 3
          ],
          functions: [
            <ref *5> {
              token: 'F',
              parent: [Circular *2],
              name: 'add',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'number', identifier: 'value' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'newNode',
                  equals: {
                    token: 'I',
                    className: 'Node',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'value',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    }
                  }
                },
                {
                  token: 'If',
                  ifBlock: {
                    expression: {
                      token: 'BE',
                      operator: '==',
                      left: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'head',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      right: {
                        token: 'V',
                        type: 'undefined',
                        value: undefined,
                        typeStr: 'undefined',
                        numLiveReferences: 0
                      }
                    },
                    within: [
                      {
                        token: 'R',
                        variable: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'head',
                          type: 'instance',
                          typeStr: 'Node'
                        },
                        equals: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'newNode',
                          type: 'unknown',
                          typeStr: 'unknown'
                        }
                      },
                      {
                        token: 'R',
                        variable: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'tail',
                          type: 'instance',
                          typeStr: 'Node'
                        },
                        equals: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'head',
                          type: 'unknown',
                          typeStr: 'unknown'
                        }
                      },
                      [length]: 2
                    ]
                  },
                  elifBlocks: [ [length]: 0 ],
                  elseBlock: {
                    token: 'E',
                    within: [
                      {
                        token: 'FC',
                        functionName: 'linkNext',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'VA',
                              scope: undefined,
                              variableName: 'newNode',
                              type: 'unknown',
                              typeStr: 'unknown'
                            },
                            [length]: 1
                          ]
                        },
                        scope: { token: 'S', scope: [ 'tail', [length]: 1 ] }
                      },
                      {
                        token: 'FC',
                        functionName: 'linkPrev',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'VA',
                              scope: undefined,
                              variableName: 'tail',
                              type: 'unknown',
                              typeStr: 'unknown'
                            },
                            [length]: 1
                          ]
                        },
                        scope: {
                          token: 'S',
                          scope: [ 'newNode', [length]: 1 ]
                        }
                      },
                      {
                        token: 'R',
                        variable: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'tail',
                          type: 'instance',
                          typeStr: 'Node'
                        },
                        equals: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'newNode',
                          type: 'unknown',
                          typeStr: 'unknown'
                        }
                      },
                      [length]: 3
                    ]
                  }
                },
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'length',
                    type: 'number',
                    typeStr: 'number'
                  },
                  equals: {
                    token: 'AE',
                    left: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'length',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    right: [
                      {
                        token: 'AO',
                        operation: '+',
                        value: {
                          token: 'V',
                          type: 'number',
                          value: 1,
                          typeStr: 'number',
                          numLiveReferences: 0
                        }
                      },
                      [length]: 1
                    ]
                  }
                },
                { token: 'RT', value: undefined },
                [length]: 4
              ]
            },
            <ref *6> {
              token: 'F',
              parent: [Circular *2],
              name: 'getNode',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'number', identifier: 'index' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'nextNode',
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'head',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                {
                  token: 'D',
                  type: 'number',
                  identifier: 'i',
                  equals: {
                    token: 'V',
                    type: 'number',
                    value: 0,
                    typeStr: 'number',
                    numLiveReferences: 0
                  }
                },
                {
                  token: 'W',
                  expression: {
                    token: 'BE',
                    operator: '<',
                    left: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'i',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    right: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'index',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  within: [
                    {
                      token: 'R',
                      variable: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'nextNode',
                        type: 'instance',
                        typeStr: 'Node'
                      },
                      equals: {
                        token: 'FC',
                        functionName: 'getNext',
                        args: undefined,
                        scope: {
                          token: 'S',
                          scope: [ 'nextNode', [length]: 1 ]
                        }
                      }
                    },
                    {
                      token: 'R',
                      variable: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'i',
                        type: 'number',
                        typeStr: 'number'
                      },
                      equals: {
                        token: 'AE',
                        left: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'i',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        right: [
                          {
                            token: 'AO',
                            operation: '+',
                            value: {
                              token: 'V',
                              type: 'number',
                              value: 1,
                              typeStr: 'number',
                              numLiveReferences: 0
                            }
                          },
                          [length]: 1
                        ]
                      }
                    },
                    [length]: 2
                  ]
                },
                {
                  token: 'RT',
                  value: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'nextNode',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 4
              ]
            },
            [Circular *7],
            {
              token: 'F',
              parent: [Circular *2],
              name: 'remove',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'number', identifier: 'index' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'removed',
                  equals: {
                    token: 'FC',
                    functionName: 'getNode',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'index',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    },
                    scope: undefined
                  }
                },
                {
                  token: 'FC',
                  functionName: 'linkNext',
                  args: {
                    token: 'AI',
                    args: [
                      {
                        token: 'V',
                        type: 'undefined',
                        value: undefined,
                        typeStr: 'undefined',
                        numLiveReferences: 0
                      },
                      [length]: 1
                    ]
                  },
                  scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                },
                {
                  token: 'FC',
                  functionName: 'linkPrev',
                  args: {
                    token: 'AI',
                    args: [
                      {
                        token: 'V',
                        type: 'undefined',
                        value: undefined,
                        typeStr: 'undefined',
                        numLiveReferences: 0
                      },
                      [length]: 1
                    ]
                  },
                  scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                },
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'next',
                  equals: {
                    token: 'FC',
                    functionName: 'getNext',
                    args: undefined,
                    scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                  }
                },
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'prev',
                  equals: {
                    token: 'FC',
                    functionName: 'getPrev',
                    args: undefined,
                    scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                  }
                },
                {
                  token: 'If',
                  ifBlock: {
                    expression: {
                      token: 'BE',
                      operator: '!=',
                      left: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'next',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      right: {
                        token: 'V',
                        type: 'undefined',
                        value: undefined,
                        typeStr: 'undefined',
                        numLiveReferences: 0
                      }
                    },
                    within: [
                      {
                        token: 'FC',
                        functionName: 'linkPrev',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'VA',
                              scope: undefined,
                              variableName: 'prev',
                              type: 'unknown',
                              typeStr: 'unknown'
                            },
                            [length]: 1
                          ]
                        },
                        scope: { token: 'S', scope: [ 'next', [length]: 1 ] }
                      },
                      [length]: 1
                    ]
                  },
                  elifBlocks: [ [length]: 0 ],
                  elseBlock: undefined
                },
                {
                  token: 'If',
                  ifBlock: {
                    expression: {
                      token: 'BE',
                      operator: '!=',
                      left: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'prev',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      right: {
                        token: 'V',
                        type: 'undefined',
                        value: undefined,
                        typeStr: 'undefined',
                        numLiveReferences: 0
                      }
                    },
                    within: [
                      {
                        token: 'FC',
                        functionName: 'linkNext',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'VA',
                              scope: undefined,
                              variableName: 'next',
                              type: 'unknown',
                              typeStr: 'unknown'
                            },
                            [length]: 1
                          ]
                        },
                        scope: { token: 'S', scope: [ 'prev', [length]: 1 ] }
                      },
                      [length]: 1
                    ]
                  },
                  elifBlocks: [ [length]: 0 ],
                  elseBlock: undefined
                },
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'length',
                    type: 'number',
                    typeStr: 'number'
                  },
                  equals: {
                    token: 'AE',
                    left: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'length',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    right: [
                      {
                        token: 'AO',
                        operation: '-',
                        value: {
                          token: 'V',
                          type: 'number',
                          value: 1,
                          typeStr: 'number',
                          numLiveReferences: 0
                        }
                      },
                      [length]: 1
                    ]
                  }
                },
                {
                  token: 'RT',
                  value: {
                    token: 'FC',
                    functionName: 'getValue',
                    args: undefined,
                    scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
                  }
                },
                [length]: 9
              ]
            },
            [length]: 4
          ],
          construct: {
            token: 'CO',
            parent: [Circular *2],
            args: undefined,
            within: [ [length]: 0 ]
          }
        },
        name: 'get',
        scopes: Map(0) {},
        args: {
          token: 'A',
          args: [
            { token: 'AD', type: 'number', identifier: 'index' },
            [length]: 1
          ]
        },
        within: [
          {
            token: 'D',
            type: 'Node',
            identifier: 'inQ',
            equals: {
              token: 'FC',
              functionName: 'getNode',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'index',
                    type: 'unknown',
                    typeStr: 'unknown'
                  },
                  [length]: 1
                ]
              },
              scope: undefined
            }
          },
          {
            token: 'RT',
            value: {
              token: 'FC',
              functionName: 'getValue',
              args: undefined,
              scope: { token: 'S', scope: [ 'inQ', [length]: 1 ] }
            }
          },
          [length]: 2
        ]
      },
      'remove' => <ref *8> {
        token: 'F',
        parent: <ref *2> {
          token: 'C',
          name: 'DoublyLinkedList',
          scope: Map(0) {},
          globalVars: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'head',
              equals: undefined
            },
            {
              token: 'D',
              type: 'Node',
              identifier: 'tail',
              equals: undefined
            },
            {
              token: 'D',
              type: 'number',
              identifier: 'length',
              equals: {
                token: 'V',
                type: 'number',
                value: 0,
                typeStr: 'number',
                numLiveReferences: 0
              }
            },
            [length]: 3
          ],
          functions: [
            <ref *5> {
              token: 'F',
              parent: [Circular *2],
              name: 'add',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'number', identifier: 'value' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'newNode',
                  equals: {
                    token: 'I',
                    className: 'Node',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'value',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    }
                  }
                },
                {
                  token: 'If',
                  ifBlock: {
                    expression: {
                      token: 'BE',
                      operator: '==',
                      left: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'head',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      right: {
                        token: 'V',
                        type: 'undefined',
                        value: undefined,
                        typeStr: 'undefined',
                        numLiveReferences: 0
                      }
                    },
                    within: [
                      {
                        token: 'R',
                        variable: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'head',
                          type: 'instance',
                          typeStr: 'Node'
                        },
                        equals: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'newNode',
                          type: 'unknown',
                          typeStr: 'unknown'
                        }
                      },
                      {
                        token: 'R',
                        variable: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'tail',
                          type: 'instance',
                          typeStr: 'Node'
                        },
                        equals: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'head',
                          type: 'unknown',
                          typeStr: 'unknown'
                        }
                      },
                      [length]: 2
                    ]
                  },
                  elifBlocks: [ [length]: 0 ],
                  elseBlock: {
                    token: 'E',
                    within: [
                      {
                        token: 'FC',
                        functionName: 'linkNext',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'VA',
                              scope: undefined,
                              variableName: 'newNode',
                              type: 'unknown',
                              typeStr: 'unknown'
                            },
                            [length]: 1
                          ]
                        },
                        scope: { token: 'S', scope: [ 'tail', [length]: 1 ] }
                      },
                      {
                        token: 'FC',
                        functionName: 'linkPrev',
                        args: {
                          token: 'AI',
                          args: [
                            {
                              token: 'VA',
                              scope: undefined,
                              variableName: 'tail',
                              type: 'unknown',
                              typeStr: 'unknown'
                            },
                            [length]: 1
                          ]
                        },
                        scope: {
                          token: 'S',
                          scope: [ 'newNode', [length]: 1 ]
                        }
                      },
                      {
                        token: 'R',
                        variable: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'tail',
                          type: 'instance',
                          typeStr: 'Node'
                        },
                        equals: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'newNode',
                          type: 'unknown',
                          typeStr: 'unknown'
                        }
                      },
                      [length]: 3
                    ]
                  }
                },
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'length',
                    type: 'number',
                    typeStr: 'number'
                  },
                  equals: {
                    token: 'AE',
                    left: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'length',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    right: [
                      {
                        token: 'AO',
                        operation: '+',
                        value: {
                          token: 'V',
                          type: 'number',
                          value: 1,
                          typeStr: 'number',
                          numLiveReferences: 0
                        }
                      },
                      [length]: 1
                    ]
                  }
                },
                { token: 'RT', value: undefined },
                [length]: 4
              ]
            },
            <ref *6> {
              token: 'F',
              parent: [Circular *2],
              name: 'getNode',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'number', identifier: 'index' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'nextNode',
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'head',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                {
                  token: 'D',
                  type: 'number',
                  identifier: 'i',
                  equals: {
                    token: 'V',
                    type: 'number',
                    value: 0,
                    typeStr: 'number',
                    numLiveReferences: 0
                  }
                },
                {
                  token: 'W',
                  expression: {
                    token: 'BE',
                    operator: '<',
                    left: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'i',
                      type: 'unknown',
                      typeStr: 'unknown'
                    },
                    right: {
                      token: 'VA',
                      scope: undefined,
                      variableName: 'index',
                      type: 'unknown',
                      typeStr: 'unknown'
                    }
                  },
                  within: [
                    {
                      token: 'R',
                      variable: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'nextNode',
                        type: 'instance',
                        typeStr: 'Node'
                      },
                      equals: {
                        token: 'FC',
                        functionName: 'getNext',
                        args: undefined,
                        scope: {
                          token: 'S',
                          scope: [ 'nextNode', [length]: 1 ]
                        }
                      }
                    },
                    {
                      token: 'R',
                      variable: {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'i',
                        type: 'number',
                        typeStr: 'number'
                      },
                      equals: {
                        token: 'AE',
                        left: {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'i',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        right: [
                          {
                            token: 'AO',
                            operation: '+',
                            value: {
                              token: 'V',
                              type: 'number',
                              value: 1,
                              typeStr: 'number',
                              numLiveReferences: 0
                            }
                          },
                          [length]: 1
                        ]
                      }
                    },
                    [length]: 2
                  ]
                },
                {
                  token: 'RT',
                  value: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'nextNode',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 4
              ]
            },
            <ref *7> {
              token: 'F',
              parent: [Circular *2],
              name: 'get',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'number', identifier: 'index' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'D',
                  type: 'Node',
                  identifier: 'inQ',
                  equals: {
                    token: 'FC',
                    functionName: 'getNode',
                    args: {
                      token: 'AI',
                      args: [
                        {
                          token: 'VA',
                          scope: undefined,
                          variableName: 'index',
                          type: 'unknown',
                          typeStr: 'unknown'
                        },
                        [length]: 1
                      ]
                    },
                    scope: undefined
                  }
                },
                {
                  token: 'RT',
                  value: {
                    token: 'FC',
                    functionName: 'getValue',
                    args: undefined,
                    scope: { token: 'S', scope: [ 'inQ', [length]: 1 ] }
                  }
                },
                [length]: 2
              ]
            },
            [Circular *8],
            [length]: 4
          ],
          construct: {
            token: 'CO',
            parent: [Circular *2],
            args: undefined,
            within: [ [length]: 0 ]
          }
        },
        name: 'remove',
        scopes: Map(0) {},
        args: {
          token: 'A',
          args: [
            { token: 'AD', type: 'number', identifier: 'index' },
            [length]: 1
          ]
        },
        within: [
          {
            token: 'D',
            type: 'Node',
            identifier: 'removed',
            equals: {
              token: 'FC',
              functionName: 'getNode',
              args: {
                token: 'AI',
                args: [
                  {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'index',
                    type: 'unknown',
                    typeStr: 'unknown'
                  },
                  [length]: 1
                ]
              },
              scope: undefined
            }
          },
          {
            token: 'FC',
            functionName: 'linkNext',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'V',
                  type: 'undefined',
                  value: undefined,
                  typeStr: 'undefined',
                  numLiveReferences: 0
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
          },
          {
            token: 'FC',
            functionName: 'linkPrev',
            args: {
              token: 'AI',
              args: [
                {
                  token: 'V',
                  type: 'undefined',
                  value: undefined,
                  typeStr: 'undefined',
                  numLiveReferences: 0
                },
                [length]: 1
              ]
            },
            scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
          },
          {
            token: 'D',
            type: 'Node',
            identifier: 'next',
            equals: {
              token: 'FC',
              functionName: 'getNext',
              args: undefined,
              scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
            }
          },
          {
            token: 'D',
            type: 'Node',
            identifier: 'prev',
            equals: {
              token: 'FC',
              functionName: 'getPrev',
              args: undefined,
              scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
            }
          },
          {
            token: 'If',
            ifBlock: {
              expression: {
                token: 'BE',
                operator: '!=',
                left: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'next',
                  type: 'unknown',
                  typeStr: 'unknown'
                },
                right: {
                  token: 'V',
                  type: 'undefined',
                  value: undefined,
                  typeStr: 'undefined',
                  numLiveReferences: 0
                }
              },
              within: [
                {
                  token: 'FC',
                  functionName: 'linkPrev',
                  args: {
                    token: 'AI',
                    args: [
                      {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'prev',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      [length]: 1
                    ]
                  },
                  scope: { token: 'S', scope: [ 'next', [length]: 1 ] }
                },
                [length]: 1
              ]
            },
            elifBlocks: [ [length]: 0 ],
            elseBlock: undefined
          },
          {
            token: 'If',
            ifBlock: {
              expression: {
                token: 'BE',
                operator: '!=',
                left: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'prev',
                  type: 'unknown',
                  typeStr: 'unknown'
                },
                right: {
                  token: 'V',
                  type: 'undefined',
                  value: undefined,
                  typeStr: 'undefined',
                  numLiveReferences: 0
                }
              },
              within: [
                {
                  token: 'FC',
                  functionName: 'linkNext',
                  args: {
                    token: 'AI',
                    args: [
                      {
                        token: 'VA',
                        scope: undefined,
                        variableName: 'next',
                        type: 'unknown',
                        typeStr: 'unknown'
                      },
                      [length]: 1
                    ]
                  },
                  scope: { token: 'S', scope: [ 'prev', [length]: 1 ] }
                },
                [length]: 1
              ]
            },
            elifBlocks: [ [length]: 0 ],
            elseBlock: undefined
          },
          {
            token: 'R',
            variable: {
              token: 'VA',
              scope: undefined,
              variableName: 'length',
              type: 'number',
              typeStr: 'number'
            },
            equals: {
              token: 'AE',
              left: {
                token: 'VA',
                scope: undefined,
                variableName: 'length',
                type: 'unknown',
                typeStr: 'unknown'
              },
              right: [
                {
                  token: 'AO',
                  operation: '-',
                  value: {
                    token: 'V',
                    type: 'number',
                    value: 1,
                    typeStr: 'number',
                    numLiveReferences: 0
                  }
                },
                [length]: 1
              ]
            }
          },
          {
            token: 'RT',
            value: {
              token: 'FC',
              functionName: 'getValue',
              args: undefined,
              scope: { token: 'S', scope: [ 'removed', [length]: 1 ] }
            }
          },
          [length]: 9
        ]
      }
    },
    <ref *3> {
      token: 'C',
      name: 'Node',
      scope: Map(0) {},
      globalVars: [
        {
          token: 'D',
          type: 'Node',
          identifier: 'next',
          equals: undefined
        },
        {
          token: 'D',
          type: 'Node',
          identifier: 'prev',
          equals: undefined
        },
        {
          token: 'D',
          type: 'number',
          identifier: 'value',
          equals: undefined
        },
        [length]: 3
      ],
      functions: [
        {
          token: 'F',
          parent: [Circular *3],
          name: 'linkNext',
          scopes: Map(0) {},
          args: {
            token: 'A',
            args: [
              { token: 'AD', type: 'Node', identifier: 'n' },
              [length]: 1
            ]
          },
          within: [
            {
              token: 'R',
              variable: {
                token: 'VA',
                scope: undefined,
                variableName: 'next',
                type: 'undefined',
                typeStr: 'Node'
              },
              equals: {
                token: 'VA',
                scope: undefined,
                variableName: 'n',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            { token: 'RT', value: undefined },
            [length]: 2
          ]
        },
        {
          token: 'F',
          parent: [Circular *3],
          name: 'linkPrev',
          scopes: Map(0) {},
          args: {
            token: 'A',
            args: [
              { token: 'AD', type: 'Node', identifier: 'n' },
              [length]: 1
            ]
          },
          within: [
            {
              token: 'R',
              variable: {
                token: 'VA',
                scope: undefined,
                variableName: 'prev',
                type: 'undefined',
                typeStr: 'Node'
              },
              equals: {
                token: 'VA',
                scope: undefined,
                variableName: 'n',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            { token: 'RT', value: undefined },
            [length]: 2
          ]
        },
        {
          token: 'F',
          parent: [Circular *3],
          name: 'getNext',
          scopes: Map(0) {},
          args: undefined,
          within: [
            {
              token: 'RT',
              value: {
                token: 'VA',
                scope: undefined,
                variableName: 'next',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            [length]: 1
          ]
        },
        {
          token: 'F',
          parent: [Circular *3],
          name: 'getPrev',
          scopes: Map(0) {},
          args: undefined,
          within: [
            {
              token: 'RT',
              value: {
                token: 'VA',
                scope: undefined,
                variableName: 'prev',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            [length]: 1
          ]
        },
        {
          token: 'F',
          parent: [Circular *3],
          name: 'getValue',
          scopes: Map(0) {},
          args: undefined,
          within: [
            {
              token: 'RT',
              value: {
                token: 'VA',
                scope: undefined,
                variableName: 'value',
                type: 'unknown',
                typeStr: 'unknown'
              }
            },
            [length]: 1
          ]
        },
        [length]: 5
      ],
      construct: {
        token: 'CO',
        parent: [Circular *3],
        args: {
          token: 'A',
          args: [
            { token: 'AD', type: 'number', identifier: 'x' },
            [length]: 1
          ]
        },
        within: [
          {
            token: 'R',
            variable: {
              token: 'VA',
              scope: undefined,
              variableName: 'value',
              type: 'number',
              typeStr: 'number'
            },
            equals: {
              token: 'VA',
              scope: undefined,
              variableName: 'x',
              type: 'unknown',
              typeStr: 'unknown'
            }
          },
          [length]: 1
        ]
      }
    } => Map(5) {
      'linkNext' => <ref *9> {
        token: 'F',
        parent: <ref *3> {
          token: 'C',
          name: 'Node',
          scope: Map(0) {},
          globalVars: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'next',
              equals: undefined
            },
            {
              token: 'D',
              type: 'Node',
              identifier: 'prev',
              equals: undefined
            },
            {
              token: 'D',
              type: 'number',
              identifier: 'value',
              equals: undefined
            },
            [length]: 3
          ],
          functions: [
            [Circular *9],
            {
              token: 'F',
              parent: [Circular *3],
              name: 'linkPrev',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'Node', identifier: 'n' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'prev',
                    type: 'undefined',
                    typeStr: 'Node'
                  },
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'n',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                { token: 'RT', value: undefined },
                [length]: 2
              ]
            },
            {
              token: 'F',
              parent: [Circular *3],
              name: 'getNext',
              scopes: Map(0) {},
              args: undefined,
              within: [
                {
                  token: 'RT',
                  value: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'next',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 1
              ]
            },
            {
              token: 'F',
              parent: [Circular *3],
              name: 'getPrev',
              scopes: Map(0) {},
              args: undefined,
              within: [
                {
                  token: 'RT',
                  value: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'prev',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 1
              ]
            },
            {
              token: 'F',
              parent: [Circular *3],
              name: 'getValue',
              scopes: Map(0) {},
              args: undefined,
              within: [
                {
                  token: 'RT',
                  value: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'value',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 1
              ]
            },
            [length]: 5
          ],
          construct: {
            token: 'CO',
            parent: [Circular *3],
            args: {
              token: 'A',
              args: [
                { token: 'AD', type: 'number', identifier: 'x' },
                [length]: 1
              ]
            },
            within: [
              {
                token: 'R',
                variable: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'value',
                  type: 'number',
                  typeStr: 'number'
                },
                equals: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'x',
                  type: 'unknown',
                  typeStr: 'unknown'
                }
              },
              [length]: 1
            ]
          }
        },
        name: 'linkNext',
        scopes: Map(0) {},
        args: {
          token: 'A',
          args: [
            { token: 'AD', type: 'Node', identifier: 'n' },
            [length]: 1
          ]
        },
        within: [
          {
            token: 'R',
            variable: {
              token: 'VA',
              scope: undefined,
              variableName: 'next',
              type: 'undefined',
              typeStr: 'Node'
            },
            equals: {
              token: 'VA',
              scope: undefined,
              variableName: 'n',
              type: 'unknown',
              typeStr: 'unknown'
            }
          },
          { token: 'RT', value: undefined },
          [length]: 2
        ]
      },
      'linkPrev' => <ref *10> {
        token: 'F',
        parent: <ref *3> {
          token: 'C',
          name: 'Node',
          scope: Map(0) {},
          globalVars: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'next',
              equals: undefined
            },
            {
              token: 'D',
              type: 'Node',
              identifier: 'prev',
              equals: undefined
            },
            {
              token: 'D',
              type: 'number',
              identifier: 'value',
              equals: undefined
            },
            [length]: 3
          ],
          functions: [
            <ref *9> {
              token: 'F',
              parent: [Circular *3],
              name: 'linkNext',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'Node', identifier: 'n' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'next',
                    type: 'undefined',
                    typeStr: 'Node'
                  },
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'n',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                { token: 'RT', value: undefined },
                [length]: 2
              ]
            },
            [Circular *10],
            {
              token: 'F',
              parent: [Circular *3],
              name: 'getNext',
              scopes: Map(0) {},
              args: undefined,
              within: [
                {
                  token: 'RT',
                  value: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'next',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 1
              ]
            },
            {
              token: 'F',
              parent: [Circular *3],
              name: 'getPrev',
              scopes: Map(0) {},
              args: undefined,
              within: [
                {
                  token: 'RT',
                  value: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'prev',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 1
              ]
            },
            {
              token: 'F',
              parent: [Circular *3],
              name: 'getValue',
              scopes: Map(0) {},
              args: undefined,
              within: [
                {
                  token: 'RT',
                  value: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'value',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 1
              ]
            },
            [length]: 5
          ],
          construct: {
            token: 'CO',
            parent: [Circular *3],
            args: {
              token: 'A',
              args: [
                { token: 'AD', type: 'number', identifier: 'x' },
                [length]: 1
              ]
            },
            within: [
              {
                token: 'R',
                variable: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'value',
                  type: 'number',
                  typeStr: 'number'
                },
                equals: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'x',
                  type: 'unknown',
                  typeStr: 'unknown'
                }
              },
              [length]: 1
            ]
          }
        },
        name: 'linkPrev',
        scopes: Map(0) {},
        args: {
          token: 'A',
          args: [
            { token: 'AD', type: 'Node', identifier: 'n' },
            [length]: 1
          ]
        },
        within: [
          {
            token: 'R',
            variable: {
              token: 'VA',
              scope: undefined,
              variableName: 'prev',
              type: 'undefined',
              typeStr: 'Node'
            },
            equals: {
              token: 'VA',
              scope: undefined,
              variableName: 'n',
              type: 'unknown',
              typeStr: 'unknown'
            }
          },
          { token: 'RT', value: undefined },
          [length]: 2
        ]
      },
      'getNext' => <ref *11> {
        token: 'F',
        parent: <ref *3> {
          token: 'C',
          name: 'Node',
          scope: Map(0) {},
          globalVars: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'next',
              equals: undefined
            },
            {
              token: 'D',
              type: 'Node',
              identifier: 'prev',
              equals: undefined
            },
            {
              token: 'D',
              type: 'number',
              identifier: 'value',
              equals: undefined
            },
            [length]: 3
          ],
          functions: [
            <ref *9> {
              token: 'F',
              parent: [Circular *3],
              name: 'linkNext',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'Node', identifier: 'n' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'next',
                    type: 'undefined',
                    typeStr: 'Node'
                  },
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'n',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                { token: 'RT', value: undefined },
                [length]: 2
              ]
            },
            <ref *10> {
              token: 'F',
              parent: [Circular *3],
              name: 'linkPrev',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'Node', identifier: 'n' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'prev',
                    type: 'undefined',
                    typeStr: 'Node'
                  },
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'n',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                { token: 'RT', value: undefined },
                [length]: 2
              ]
            },
            [Circular *11],
            {
              token: 'F',
              parent: [Circular *3],
              name: 'getPrev',
              scopes: Map(0) {},
              args: undefined,
              within: [
                {
                  token: 'RT',
                  value: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'prev',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 1
              ]
            },
            {
              token: 'F',
              parent: [Circular *3],
              name: 'getValue',
              scopes: Map(0) {},
              args: undefined,
              within: [
                {
                  token: 'RT',
                  value: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'value',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 1
              ]
            },
            [length]: 5
          ],
          construct: {
            token: 'CO',
            parent: [Circular *3],
            args: {
              token: 'A',
              args: [
                { token: 'AD', type: 'number', identifier: 'x' },
                [length]: 1
              ]
            },
            within: [
              {
                token: 'R',
                variable: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'value',
                  type: 'number',
                  typeStr: 'number'
                },
                equals: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'x',
                  type: 'unknown',
                  typeStr: 'unknown'
                }
              },
              [length]: 1
            ]
          }
        },
        name: 'getNext',
        scopes: Map(0) {},
        args: undefined,
        within: [
          {
            token: 'RT',
            value: {
              token: 'VA',
              scope: undefined,
              variableName: 'next',
              type: 'unknown',
              typeStr: 'unknown'
            }
          },
          [length]: 1
        ]
      },
      'getPrev' => <ref *12> {
        token: 'F',
        parent: <ref *3> {
          token: 'C',
          name: 'Node',
          scope: Map(0) {},
          globalVars: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'next',
              equals: undefined
            },
            {
              token: 'D',
              type: 'Node',
              identifier: 'prev',
              equals: undefined
            },
            {
              token: 'D',
              type: 'number',
              identifier: 'value',
              equals: undefined
            },
            [length]: 3
          ],
          functions: [
            <ref *9> {
              token: 'F',
              parent: [Circular *3],
              name: 'linkNext',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'Node', identifier: 'n' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'next',
                    type: 'undefined',
                    typeStr: 'Node'
                  },
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'n',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                { token: 'RT', value: undefined },
                [length]: 2
              ]
            },
            <ref *10> {
              token: 'F',
              parent: [Circular *3],
              name: 'linkPrev',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'Node', identifier: 'n' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'prev',
                    type: 'undefined',
                    typeStr: 'Node'
                  },
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'n',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                { token: 'RT', value: undefined },
                [length]: 2
              ]
            },
            <ref *11> {
              token: 'F',
              parent: [Circular *3],
              name: 'getNext',
              scopes: Map(0) {},
              args: undefined,
              within: [
                {
                  token: 'RT',
                  value: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'next',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 1
              ]
            },
            [Circular *12],
            {
              token: 'F',
              parent: [Circular *3],
              name: 'getValue',
              scopes: Map(0) {},
              args: undefined,
              within: [
                {
                  token: 'RT',
                  value: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'value',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 1
              ]
            },
            [length]: 5
          ],
          construct: {
            token: 'CO',
            parent: [Circular *3],
            args: {
              token: 'A',
              args: [
                { token: 'AD', type: 'number', identifier: 'x' },
                [length]: 1
              ]
            },
            within: [
              {
                token: 'R',
                variable: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'value',
                  type: 'number',
                  typeStr: 'number'
                },
                equals: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'x',
                  type: 'unknown',
                  typeStr: 'unknown'
                }
              },
              [length]: 1
            ]
          }
        },
        name: 'getPrev',
        scopes: Map(0) {},
        args: undefined,
        within: [
          {
            token: 'RT',
            value: {
              token: 'VA',
              scope: undefined,
              variableName: 'prev',
              type: 'unknown',
              typeStr: 'unknown'
            }
          },
          [length]: 1
        ]
      },
      'getValue' => <ref *13> {
        token: 'F',
        parent: <ref *3> {
          token: 'C',
          name: 'Node',
          scope: Map(0) {},
          globalVars: [
            {
              token: 'D',
              type: 'Node',
              identifier: 'next',
              equals: undefined
            },
            {
              token: 'D',
              type: 'Node',
              identifier: 'prev',
              equals: undefined
            },
            {
              token: 'D',
              type: 'number',
              identifier: 'value',
              equals: undefined
            },
            [length]: 3
          ],
          functions: [
            <ref *9> {
              token: 'F',
              parent: [Circular *3],
              name: 'linkNext',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'Node', identifier: 'n' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'next',
                    type: 'undefined',
                    typeStr: 'Node'
                  },
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'n',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                { token: 'RT', value: undefined },
                [length]: 2
              ]
            },
            <ref *10> {
              token: 'F',
              parent: [Circular *3],
              name: 'linkPrev',
              scopes: Map(0) {},
              args: {
                token: 'A',
                args: [
                  { token: 'AD', type: 'Node', identifier: 'n' },
                  [length]: 1
                ]
              },
              within: [
                {
                  token: 'R',
                  variable: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'prev',
                    type: 'undefined',
                    typeStr: 'Node'
                  },
                  equals: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'n',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                { token: 'RT', value: undefined },
                [length]: 2
              ]
            },
            <ref *11> {
              token: 'F',
              parent: [Circular *3],
              name: 'getNext',
              scopes: Map(0) {},
              args: undefined,
              within: [
                {
                  token: 'RT',
                  value: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'next',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 1
              ]
            },
            <ref *12> {
              token: 'F',
              parent: [Circular *3],
              name: 'getPrev',
              scopes: Map(0) {},
              args: undefined,
              within: [
                {
                  token: 'RT',
                  value: {
                    token: 'VA',
                    scope: undefined,
                    variableName: 'prev',
                    type: 'unknown',
                    typeStr: 'unknown'
                  }
                },
                [length]: 1
              ]
            },
            [Circular *13],
            [length]: 5
          ],
          construct: {
            token: 'CO',
            parent: [Circular *3],
            args: {
              token: 'A',
              args: [
                { token: 'AD', type: 'number', identifier: 'x' },
                [length]: 1
              ]
            },
            within: [
              {
                token: 'R',
                variable: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'value',
                  type: 'number',
                  typeStr: 'number'
                },
                equals: {
                  token: 'VA',
                  scope: undefined,
                  variableName: 'x',
                  type: 'unknown',
                  typeStr: 'unknown'
                }
              },
              [length]: 1
            ]
          }
        },
        name: 'getValue',
        scopes: Map(0) {},
        args: undefined,
        within: [
          {
            token: 'RT',
            value: {
              token: 'VA',
              scope: undefined,
              variableName: 'value',
              type: 'unknown',
              typeStr: 'unknown'
            }
          },
          [length]: 1
        ]
      }
    }
  },
  stackPointer: 0
}