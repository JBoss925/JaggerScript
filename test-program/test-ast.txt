[
  {
    tokenType: 'Class',
    className: 'BreakTest',
    within: [
      {
        tokenType: 'Constructor',
        args: null,
        within: [
          {
            tokenType: 'Comment',
            comment: 'This is a program that tests loop breaks.'
          },
          {
            tokenType: 'Comment',
            comment: "When working, this should log '1' four times"
          },
          { tokenType: 'Comment', comment: 'in the console.' },
          [length]: 3
        ]
      },
      {
        tokenType: 'Function',
        funcName: 'main',
        args: null,
        within: [
          {
            tokenType: 'FuncCall',
            functionName: 'test',
            args: null,
            scope: null
          },
          { tokenType: 'Return', value: null },
          [length]: 2
        ]
      },
      {
        tokenType: 'Function',
        funcName: 'test',
        args: null,
        within: [
          {
            tokenType: 'Definition',
            type: 'number',
            identifier: 'i',
            equals: { tokenType: 'Primitive', type: 'number', value: 0 }
          },
          {
            tokenType: 'Definition',
            type: 'number',
            identifier: 'z',
            equals: { tokenType: 'Primitive', type: 'number', value: 0 }
          },
          {
            tokenType: 'Definition',
            type: 'number',
            identifier: 'x',
            equals: { tokenType: 'Primitive', type: 'number', value: 0 }
          },
          {
            tokenType: 'Definition',
            type: 'number',
            identifier: 'y',
            equals: { tokenType: 'Primitive', type: 'number', value: 0 }
          },
          {
            tokenType: 'WhileLoop',
            expression: {
              tokenType: 'BooleanExpression',
              op: '<',
              left: { tokenType: 'Variable', scope: null, variableName: 'i' },
              right: { tokenType: 'Primitive', type: 'number', value: 1000 }
            },
            within: [
              {
                tokenType: 'WhileLoop',
                expression: {
                  tokenType: 'BooleanExpression',
                  op: '<',
                  left: {
                    tokenType: 'Variable',
                    scope: null,
                    variableName: 'z'
                  },
                  right: {
                    tokenType: 'Primitive',
                    type: 'number',
                    value: 1000
                  }
                },
                within: [
                  {
                    tokenType: 'Reassignment',
                    variable: {
                      tokenType: 'Variable',
                      scope: null,
                      variableName: 'x'
                    },
                    equals: {
                      tokenType: 'ArithmeticExpression',
                      left: {
                        tokenType: 'Variable',
                        scope: null,
                        variableName: 'x'
                      },
                      right: [
                        {
                          tokenType: 'ArithmeticOperation',
                          op: '+',
                          value: {
                            tokenType: 'Primitive',
                            type: 'number',
                            value: 1
                          }
                        },
                        [length]: 1
                      ]
                    }
                  },
                  {
                    tokenType: 'Reassignment',
                    variable: {
                      tokenType: 'Variable',
                      scope: null,
                      variableName: 'z'
                    },
                    equals: {
                      tokenType: 'ArithmeticExpression',
                      left: {
                        tokenType: 'Variable',
                        scope: null,
                        variableName: 'z'
                      },
                      right: [
                        {
                          tokenType: 'ArithmeticOperation',
                          op: '+',
                          value: {
                            tokenType: 'Primitive',
                            type: 'number',
                            value: 1
                          }
                        },
                        [length]: 1
                      ]
                    }
                  },
                  { tokenType: 'Break' },
                  [length]: 3
                ]
              },
              {
                tokenType: 'Reassignment',
                variable: {
                  tokenType: 'Variable',
                  scope: null,
                  variableName: 'y'
                },
                equals: {
                  tokenType: 'ArithmeticExpression',
                  left: {
                    tokenType: 'Variable',
                    scope: null,
                    variableName: 'y'
                  },
                  right: [
                    {
                      tokenType: 'ArithmeticOperation',
                      op: '+',
                      value: {
                        tokenType: 'Primitive',
                        type: 'number',
                        value: 1
                      }
                    },
                    [length]: 1
                  ]
                }
              },
              {
                tokenType: 'Reassignment',
                variable: {
                  tokenType: 'Variable',
                  scope: null,
                  variableName: 'i'
                },
                equals: {
                  tokenType: 'ArithmeticExpression',
                  left: {
                    tokenType: 'Variable',
                    scope: null,
                    variableName: 'i'
                  },
                  right: [
                    {
                      tokenType: 'ArithmeticOperation',
                      op: '+',
                      value: {
                        tokenType: 'Primitive',
                        type: 'number',
                        value: 1
                      }
                    },
                    [length]: 1
                  ]
                }
              },
              { tokenType: 'Break' },
              [length]: 4
            ]
          },
          {
            tokenType: 'FuncCall',
            functionName: 'log',
            args: {
              tokenType: 'ArgumentsIn',
              args: [
                {
                  tokenType: 'Variable',
                  scope: null,
                  variableName: 'i'
                },
                [length]: 1
              ]
            },
            scope: { tokenType: 'ScopeSpec', scope: 'console' }
          },
          {
            tokenType: 'FuncCall',
            functionName: 'log',
            args: {
              tokenType: 'ArgumentsIn',
              args: [
                {
                  tokenType: 'Variable',
                  scope: null,
                  variableName: 'z'
                },
                [length]: 1
              ]
            },
            scope: { tokenType: 'ScopeSpec', scope: 'console' }
          },
          {
            tokenType: 'FuncCall',
            functionName: 'log',
            args: {
              tokenType: 'ArgumentsIn',
              args: [
                {
                  tokenType: 'Variable',
                  scope: null,
                  variableName: 'x'
                },
                [length]: 1
              ]
            },
            scope: { tokenType: 'ScopeSpec', scope: 'console' }
          },
          {
            tokenType: 'FuncCall',
            functionName: 'log',
            args: {
              tokenType: 'ArgumentsIn',
              args: [
                {
                  tokenType: 'Variable',
                  scope: null,
                  variableName: 'y'
                },
                [length]: 1
              ]
            },
            scope: { tokenType: 'ScopeSpec', scope: 'console' }
          },
          { tokenType: 'Return', value: null },
          [length]: 10
        ]
      },
      [length]: 3
    ]
  },
  [length]: 1
]